<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>Alex Stephen</title>
 <link href="http://localhost:4000/atom.xml" rel="self"/>
 <link href="http://localhost:4000/"/>
 <updated>2017-02-11T18:20:32-08:00</updated>
 <id>http://localhost:4000</id>
 <author>
   <name>Alex Stephen</name>
 </author>
 
 
 
 <entry>
   <title>2016: another year in review</title>
   <link href="http://localhost:4000/posts/2016-in-review/"/>
   <updated>2016-12-21T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/2016-in-review</id>
   <content type="html">&lt;p&gt;This year was pretty shit, so I wasn’t very keen on doing
one of these posts. So many of my favourite musicians died, so many of my
favourite countries made mistakes, so many of my favourite people are worried and
sad, and I am worried and sad with them. But this year was not the worst year
we’ve ever had, or might ever have, so I will tell
you the good parts of my year. Maybe you’ll tell me the good parts of yours,
and then for 3 minutes we will be less worried and sad, together. ❤️&lt;/p&gt;

&lt;p&gt;Here’s life as GitHub saw it. Red text is dumb projects I’ve shipped (you can
  tell because the names don’t make sense), black text is
conferences I’ve spoken at:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2016 contribution graph with project and conferences markers&quot; src=&quot;/images/2016-review/github.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I first looked at this graph I freaked out,
because it looks like I did very little until April. Then someone reminded me
that I have a job that isn’t writing emoji apps, so I probably
just you know, went to work and had normal evening hobbies like playing The Sims
and hanging out with my cat. It just takes 4 months before I get antsy.&lt;/p&gt;

&lt;p&gt;Here’s life as Instagram saw it. I’ve apparently started taking a lot more
selfies, which is either pretty vain or slightly more self confident, or let’s be
honest, neither. This is also the first year when I took a lot of photos with my nice camera
when traveling, but didn’t have the energy to process or post any of them. Shit
happens.&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2016 contribution graph&quot; src=&quot;/images/2016-review/instagram.png&quot; /&gt;&lt;/p&gt;

&lt;h2&gt;🛫✨🛬&lt;/h2&gt;
&lt;p&gt;I love traveling almost as much as I love cheese (which is a lot),
and I’m so happy about all the places I got to go to this
year. I travelled every month that didn’t start with an A. I went to 17 cities
and 8 countries.
In July, I was at home for a total of 9 days. I am lucky that I work on a team
that still tolerates the fact that every couple of months I’ll just be in a
different timezone, and I’m worried about when this will end and I’ll have to stand still.
My favourite trip
was going to Taiwan, which was a country I didn’t expect to love as
much as I did.&lt;/p&gt;

&lt;h2 id=&quot;️&quot;&gt;✌️🐼&lt;/h2&gt;
&lt;p&gt;I drank over 500 cups of coffee. I learnt about 60 traditional Chinese characters.
I’m not trying to learn how to speak the language, I’m just fascinated by the radicals and the writing and
the calligraphy and how some words are like a story. I might write a blog post
about it one day when I’m less nervous about it. I drew a &lt;a href=&quot;https://dribbble.com/shots/3168680-Polymerosaurus&quot;&gt;dinosaur&lt;/a&gt;. I still love my job.
I still didn’t work on weekends. I still didn’t spoil Star Wars for anybody. I turned 31.&lt;/p&gt;

&lt;h3 id=&quot;️-1&quot;&gt;❤️&lt;/h3&gt;
&lt;p&gt;I hope your year was ok, Internet friends.&lt;/p&gt;

&lt;p&gt;(you can read the &lt;a href=&quot;../a-year-in-review&quot;&gt;2015&lt;/a&gt; year in review if
you’re all warm and cozy and don’t want to leave)&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>I made a 2001-era emoji font! That you can use!</title>
   <link href="http://localhost:4000/posts/og-emoji-font/"/>
   <updated>2016-10-04T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/og-emoji-font</id>
   <content type="html">&lt;p&gt;You know the scenes in Friends when Ross starts talking about dinosaurs
and he’s SUPER excited but everyone else is losing the will to live?
This is basically that, only instead of dinosaurs, it’s emoji, and unlike Ross,
I have never successfully befriended a monkey.&lt;/p&gt;

&lt;p&gt;Last month, my coworker casually told me he still has a 2001 era DoCoMo phone, which is
one of the first phones to have emoji (🤓🤓🤓: emoji first appeared in 1999, on DoCoMo phones,
and DoCoMo phones alone). So I got ahold of this phone. Which charged, turned on
and most importantly, TOTALLY had OG emoji:&lt;/p&gt;

&lt;div style=&quot;width:100%&quot;&gt;
&lt;img src=&quot;/images/2016-09-28/all-1.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/all-2.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/all-3.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;br /&gt;&lt;br /&gt;&lt;br /&gt;
&lt;/div&gt;

&lt;p&gt;I spent the whole day being unproductive and sending emoji messages to people:&lt;/p&gt;

&lt;div style=&quot;width:100%&quot;&gt;
&lt;img src=&quot;/images/2016-09-28/msg-1.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/msg-2.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;img src=&quot;/images/2016-09-28/msg-3.jpg&quot; width=&quot;30%&quot; style=&quot;display:inline&quot; /&gt;
&lt;/div&gt;

&lt;h2 id=&quot;svgs&quot;&gt;SVGs&lt;/h2&gt;

&lt;p&gt;I then took a 10 hour flight to Europe and, for lack of better things to do
while watching every movie that came out this year, I drew every one of those emoji as a sprite.
166 emoji in total, 12x12px each, in one of six colors. This was my first time doing pixels
sprites, so I obviously fucked it up: I ended up with a bunch of random sprite sheets,
each with a random number of sprites in it, which was a bit of a mess. Thankfully,
&lt;a href=&quot;https://twitter.com/amandaglosson&quot;&gt;Amanda Glosson&lt;/a&gt;, reigning queen of pixels, wrote me a script to transmogrify my mess into
individual svgs. &lt;strong&gt;These&lt;/strong&gt; individual SVGs, to be exact:&lt;/p&gt;

&lt;iframe src=&quot;/images/2016-09-28/svgs.html&quot; width=&quot;100%&quot; onload=&quot;this.height=this.contentDocument.body.getBoundingClientRect().height + 20&quot; frameborder=&quot;0&quot;&gt;&lt;/iframe&gt;

&lt;p&gt;LOOK HOW PRETTY THEY ARE! &lt;span class=&quot;og&quot;&gt;💓&lt;/span&gt;&lt;/p&gt;

&lt;h2 id=&quot;a-wild-font-appears&quot;&gt;A wild font appears&lt;/h2&gt;
&lt;p&gt;The reason why I made those SVGs was partly because Captain America: Civil War is unbearably
boring, but partly because I wanted to make a font and use it everywhere like
an emoji hipster.&lt;/p&gt;

&lt;p&gt;So then I did. I used &lt;a href=&quot;http://app.fontastic.me/&quot;&gt;Fontastic&lt;/a&gt; to make the font – it’s black and white for now,
because I couldn’t figure out how to colour the glyphs correctly, but I will soon (if anyone
  knows of an easy way, holla my way). I
also mapped the original emoji glyph to one of the current existing emoji code points,
based on &lt;a href=&quot;http://unicode.org/emoji/charts/full-emoji-list.html&quot;&gt;this&lt;/a&gt; list, because let’s be honest, some of them were mysterious.
Do you know what &lt;span class=&quot;og&quot;&gt;💥&lt;/span&gt; means? It’s 💥. And
&lt;span class=&quot;og&quot;&gt;💦&lt;/span&gt; is 💦. 12 pixels ain’t a lot of pixels, friends.&lt;/p&gt;

&lt;style&gt;
.emoji-sample {
  font-size: 24px;
  letter-spacing: 6px;
  line-height: 30px !important;
  word-wrap: break-word;
}
&lt;/style&gt;

&lt;p&gt;Here the 166 emoji as they look today:&lt;/p&gt;
&lt;div&gt;
&lt;p class=&quot;emoji-sample&quot;&gt;❤💔💓💕😃😖😞😵😠🎵♨💠💋✨💡💢👊💣🎶💤❗⁉‼💥💦💧💨〰️➰⤴⤵↗↘↖↙☀️☁️☔️⛄⚡️🌀🌁🌂♈️♉️♊️♋️♌️♍️♎️♏️♐️♑️♒️♓️🎽⚾️⛳🎾⚽️🎿🏀🏁📟🚃Ⓜ🚄🚗🚙🚌🚢✈️🏠🏢🏣🏥🏦🏧🏨🏪⛽🅿🚥🚻🍴☕🍸🍺🍔👠✂️🎤🎥🎠🎧🎨🎩🎪🎫🚬🚭📷👜📖🎀🎁🎂☎︎📱📝📺🎮💿♥♠♦♣👀👂✊✌️✋👣👟👓🌑🌔🌓🌙🌕🐶🐱⛵🎄📲📩📠✉︎💴🆓🆔↩🆑🔍🆕🚩➿#️⃣0️⃣1️⃣2️⃣3️⃣4️⃣5️⃣6️⃣7️⃣8️⃣9️⃣🆗&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;And here’s the same list, using the DoCoMo emoji font:&lt;/p&gt;
&lt;div&gt;
&lt;p class=&quot;og emoji-sample&quot;&gt;❤💔💓💕😃😖😞😵😠🎵♨💠💋✨💡💢👊💣🎶💤❗⁉‼💥💦💧💨〰️➰⤴⤵↗↘↖↙☀☁︎☔︎⛄⚡︎🌀🌁🌂♈︎♉︎♊︎♋︎♌︎♍︎♎︎♏︎♐︎♑︎♒︎♓︎🎽⚾︎⛳🎾⚽︎🎿🏀🏁📟🚃Ⓜ🚄🚗🚙🚌🚢✈️🏠🏢🏣🏥🏦🏧🏨🏪⛽🅿🚥🚻🍴☕🍸🍺🍔👠✂︎🎤🎥🎠🎧🎨🎩🎪🎫🚬🚭📷👜📖🎀🎁🎂☎︎📱📝📺🎮💿♥♠♦♣👀👂✊✌︎✋👣👟👓🌑🌔🌓🌙🌕🐶🐱⛵🎄📲📩📠✉︎💴🆓🆔↩🆑🔍🆕🚩➿#0123456789🆗&lt;/p&gt;
&lt;/div&gt;

&lt;p&gt;There’s some OG emoji that don’t even exist today!:&lt;/p&gt;
&lt;p class=&quot;og emoji-sample&quot;&gt;abcde&lt;/p&gt;

&lt;h2&gt;Boom! &lt;span class=&quot;og&quot; style=&quot;font-weight:normal;&quot;&gt;💣&lt;/span&gt;&lt;/h2&gt;

&lt;p&gt;If you want to use it, you can download the font &lt;a href=&quot;/fonts/og-dcm-emoji.ttf&quot;&gt;here&lt;/a&gt;, and use
it as a &lt;code class=&quot;highlighter-rouge&quot;&gt;font-face&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;@font-face {
  font-family: og-emoji;
  src: url(/fonts/og-dcm-emoji.ttf);
}
.og {
  font-family: og-emoji, sans-serif;
}
&lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'og'&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;💥&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;If you’re going to use it, maybe give me some credit, because I spent an unhealthy
amount of time on it. Also, if you’re
DoCoMo, please don’t sue me. Emojineering comes only from the &lt;span class=&quot;og&quot;&gt;❤&lt;/span&gt;.&lt;/p&gt;

&lt;h1 class=&quot;og&quot; style=&quot;font-weight:normal;&quot;&gt;✌︎ ✨ 🐱 💋 🆗&lt;/h1&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>I fixed a pair of headphones with some soldering, and you can too!</title>
   <link href="http://localhost:4000/posts/how-i-fixed-headphones/"/>
   <updated>2016-01-26T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/how-i-fixed-headphones</id>
   <content type="html">&lt;p&gt;Here’s the thing: I have this &lt;a href=&quot;http://s3-us-west-2.amazonaws.com/hypebeast-wordpress/image/2008/07/ed-banger-wesc-headphones.jpg&quot;&gt;sweet pair of headphones&lt;/a&gt; that I got from a
friend a gazillion years ago. I’ve always liked them because they were
free and they look super quirky but it turns out they were a limited
edition done for Ed Banger Records, which is the label that produces
Justice and Mr. Oizo. It also turns out the wire on the side is getting
a little fuckety, and is probably going to break soon, and my sweet, free, limited
edition headphones are going to be busted. 🎧&lt;/p&gt;

&lt;p&gt;Here’s this other thing you need to know: I am clumsy, and pretty shit at “fixing things”.
If I could do it, you could do it, and I’m gonna tell you how.&lt;/p&gt;

&lt;h2 id=&quot;step-0-you-should-figure-out-whats-wrong&quot;&gt;Step 0: you should figure out what’s wrong&lt;/h2&gt;
&lt;p&gt;I think about 4 things can go wrong with headphones:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;one of the cables attached to the headphones speakers is broken&lt;/li&gt;
  &lt;li&gt;the jack is broken&lt;/li&gt;
  &lt;li&gt;there’s a hole somewhere in the middle of the cable, most likely because your asshole cat went to town on it&lt;/li&gt;
  &lt;li&gt;the speakers are completely busted&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;№ 4 is A Hard Problem™, and it requires a level of skill I
don’t have. № 1 involves re-attaching wires to speakers, and
that’s what this post is about. № 2 and 3 are basically a combination of buying
a new cable and re-attaching it to the speakers, which is № 1 again. Which
means you can basically fix 3/4 problems with headphones 💖.&lt;/p&gt;

&lt;h2 id=&quot;step-1-pop-the-trunk&quot;&gt;Step 1: pop the trunk&lt;/h2&gt;
&lt;p&gt;After you’ve figured out which side of your headphones is broken, take the squishy earpad off and figure out how to get inside. Some headphones have little lever
things you need to pop. Mine have 3 little screws. Unscrew them, and place them somewhere where your asshole cat can’t eat them.&lt;/p&gt;

&lt;p&gt;This is what it looked like inside:
&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12541832/958b0672-c2d0-11e5-80f7-1526fa395c72.jpg&quot; alt=&quot;inside of the headphones&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;step-2-the-wires&quot;&gt;Step 2: the wires&lt;/h2&gt;

&lt;p&gt;Hopefully just one of the wires came loose, so that you don’t have to
guess about which wire goes where. If it’s just the one, move to the next step.
If, like me, you have to cut the whole cable and resolder all of them, you probably (definitely) should write down what order the wires came in, because you’ll forget.
I had this (if you look at the post-soldering photo, this might even make sense):&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;// i had a thicker and thinner cables.
// thick-orange means the orange wire of the thick cable.
// thin-orange is the orange wire of the thinner cable.
    ------------- speaker ---------
    [ ]         [ ]       [ ]    [ ]         soldered together
     |           |         |      |              |        |
     |           |         |      |              |        |
thick-orange thin-orange   Ø thick-red     thick-blue thin-blue
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;I also took a picture. It ended up being blurry and useless, so the written bit was 👌.&lt;/p&gt;

&lt;h2 id=&quot;step-3-cut-some-wires&quot;&gt;Step 3: cut some wires&lt;/h2&gt;

&lt;p&gt;If the cable you’re trying to solder is too frayed, you might have to shorten it.
You might also have to &lt;a href=&quot;http://www.instructables.com/id/Use-scissors-to-strip-wires!/&quot;&gt;strip&lt;/a&gt; the cable if there isn’t enough available.&lt;/p&gt;

&lt;p&gt;After you’re done, you should have a bunch of wires fairly similar to the
ones already attached to the speaker. I stripped mine with a kitchen knife because
I don’t own any tools, and it looked like this [read: pretty pro]:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12541647/804d4b14-c2ce-11e5-9d98-ed2b5923e87c.jpg&quot; alt=&quot;stripped wire&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-4-they-see-me-solderin-they-hatin&quot;&gt;Step 4: they see me solderin’, they hatin’&lt;/h2&gt;

&lt;p&gt;And that’s because I’m hilariously bad at it.&lt;/p&gt;

&lt;p&gt;Anyway, here’s a super verbose &lt;a href=&quot;https://www.youtube.com/watch?v=BLfXXRfRIzY&quot;&gt;video&lt;/a&gt;
on soldering. It basically involves heating the iron, melting some
copper into a liquid ball (if there isn’t already enough on there), and using it to attach your wire to the
speaker end it needs to be in. While it’s hard to be really good at soldering,
it’s surprisingly easy to be averagely bad at it.&lt;/p&gt;

&lt;p&gt;The good news is that if
you fuck it up, you can just unsolder the bit you just did with more heat,
and start again. Just practice a little on some spare wires before you go full out on your headphones, and don’t burn yourself.&lt;/p&gt;

&lt;p&gt;You’re going to first unsolder the old wires off the speaker, and re-solder
your new wires on. Here’s what mine looked like post soldering. You’ll notice
it’s messy and that nobody cares, because it’s all hidden inside the headphones
anyway. All you care about is your wire making contact with the speaker.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12542003/6ee0c410-c2d2-11e5-9858-e801279b3ee7.jpg&quot; alt=&quot;photo of speaker after soldering&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;step-5-the-reckoning&quot;&gt;Step 5: the reckoning&lt;/h2&gt;
&lt;p&gt;You should plug in your headphones. If everything went great, then sound
should come out of them!&lt;/p&gt;

&lt;p&gt;If sound isn’t coming out of them, it could be that
your connection is loose and you need to debug your soldering (which means repeating step 4), or that
it wasn’t the wires after all 😓&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Important bit I missed the first time:&lt;/strong&gt; The cable sits in a little rubber casing
at the edge of the headphone like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://cloud.githubusercontent.com/assets/1369170/12625281/f4b8189c-c4e7-11e5-898e-ac9d8ed5011c.jpg&quot; alt=&quot;cable rubber casing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When I first took apart the headphones, I thought it was annoying the cable was glued to this rubber casing, because it meant I couldn’t use it, and had to find a new one (hoarding broken headphones helps with this). Spoilers: this was
intentional. You should ALSO super glue your cable inside the
rubber casing, or else when you invariably tug on the cable, it will totally
break the soldering you just did. Possibly just before you’re about to demo
your amazing new fixed headphones to your friends.&lt;/p&gt;

&lt;p&gt;To be honest, the most annoying thing was putting the little earpads back. After serious
struggling, I discovered there’s a little wedge on the headphones base, where you can slip a bit of the earpad in,
and then slide it all the way across. Yours might have this too!&lt;/p&gt;

&lt;h2 id=&quot;you-did-it-yay&quot;&gt;You did it! Yay!&lt;/h2&gt;
&lt;p&gt;If everything went right, you’ve just fixed a pair of headphones.
High five, you hardware hacker you! I’m so proud! 👍💖&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>2015: a year in review</title>
   <link href="http://localhost:4000/posts/a-year-in-review/"/>
   <updated>2015-12-22T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/a-year-in-review</id>
   <content type="html">&lt;p&gt;I’ve never really done a year in review. One day, I’d like to &lt;a href=&quot;https://github.com/una/personal-goals&quot;&gt;open source&lt;/a&gt;
my goals, but since I’m still a chicken, this is a baby step towards that. Plus, this is
one of the first years I’m really proud of, and things that you’re proud of tend
to live on the Internet, for posterity.&lt;/p&gt;

&lt;p&gt;Here’s what my GitHub contributions say about it:&lt;/p&gt;

&lt;p&gt;&lt;img alt=&quot;2015 contribution graph&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/12084003/d0f4558a-b261-11e5-84f4-d28e947dd75d.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;burning-out&quot;&gt;Burning out&lt;/h2&gt;
&lt;p&gt;The year started off really poorly. My team had just shipped the new Profiles
UI in Chrome, after a year and a half of hard work, and it was met with a looooot
of Internet anger. On one side we had data to prove that the change we did was right, which made
the powers that be want to stick by it; on the other side I had Twitter,
who was calling me names and wanting me fired. Kind of ironic, since
I was just the person who implemented the feature and had no power
to change it.&lt;/p&gt;

&lt;p&gt;I think what burnt me out wasn’t waking up to a stream of negative
emails and tweets, it was knowing that there was absolutely nothing I could do about
it other than wait.&lt;/p&gt;

&lt;p&gt;So I started working on dumb side projects to feel better. I made a
&lt;a href=&quot;http://meowni.ca/meowto/&quot;&gt;link aliaser&lt;/a&gt;. I bought &lt;a href=&quot;http://canihaveapony.com/&quot;&gt;dumb&lt;/a&gt;
domains. I wrote &lt;a href=&quot;http://meowni.ca/posts/chromium-101/&quot;&gt;blog&lt;/a&gt; &lt;a href=&quot;http://meowni.ca/posts/chromium-owners&quot;&gt;posts&lt;/a&gt;
about the only thing that I knew, which was working on Chromium.
I noticed that not working on Chromium made me happy.&lt;/p&gt;

&lt;p&gt;So I bit the bullet, left Chromium, and joined Polymer.&lt;/p&gt;

&lt;h2 id=&quot;joining-polymer&quot;&gt;Joining Polymer&lt;/h2&gt;
&lt;p&gt;Looking back, I picked Polymer for a bunch of silly reasons that ended up working out
spectacularly well. I wanted to leave Montreal. I wanted to work on JavaScript,
since it was the only thing keeping me going. I didn’t want to commute to Mountain View,
which reduced my options by like a billion percent, and I wanted to ship things.
Polymer had all of that. So on April 15, I packed my cat and my books
and moved to San Francisco.&lt;/p&gt;

&lt;p&gt;Polymer is my dream job. I get to write code
that I’m genuinely passionate about. I get to try to change the web platform, and talk
about why I think we’re doing the right thing. Most importantly, I get to ship
something everyday. It turns out that’s a thing that matters to me a lot.&lt;/p&gt;

&lt;p&gt;I miss working on Chromium. I miss C++ and the big-ness and complicated-ness
that is working on a browser. It taught me that if I could find my way around
the 7 million lines of code and actually do something useful, there’s basically
nothing that I can’t do or learn. That’s one of the best feelings.&lt;/p&gt;

&lt;h2 id=&quot;tl-dr&quot;&gt;TL; DR.&lt;/h2&gt;

&lt;p&gt;I shipped 5 projects:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/meowto/&quot;&gt;meowto&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/emoji-translate/&quot;&gt;emoji-translate&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://caturday-post.herokuapp.com/&quot;&gt;caturday post&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/emoji-rain/&quot;&gt;emoji-rain&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/muster/#6&amp;amp;23&quot;&gt;muster&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;http://meowni.ca/is-ie10-dead/&quot;&gt;is IE10 dead&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
I gave 5 different talks at 3 conferences and 2 meetups:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Contributing to Chromium, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/contributing-to-chromium&quot;&gt;slides&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Push notifications for fun and profit, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/push-notifications-for-fun-and-profit-if-by-profit-you-mean-cats&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://vimeo.com/137771040&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Styling the Shadow DOM without dragons, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/styling-the-shadow-dom-without-dragons&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=IbOaJwqLgog&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Input I &amp;lt;3 you but you’re bringing me down, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/input-i-3-you-but-youre-bringing-me-down&quot;&gt;slides&lt;/a&gt;, &lt;a href=&quot;https://vimeo.com/144980655&quot;&gt;video&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;How I didn’t fix emoji in Chrome, &lt;a href=&quot;https://speakerdeck.com/notwaldorf/or-how-i-didnt-fix-emoji-in-chrome&quot;&gt;slides&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;br /&gt;
I wrote a blog post that a lot of people liked. Most importantly, this happened (#humblebrag):&lt;/p&gt;
&lt;blockquote class=&quot;twitter-tweet&quot; lang=&quot;en&quot;&gt;&lt;p lang=&quot;en&quot; dir=&quot;ltr&quot;&gt;I think &lt;a href=&quot;https://t.co/eAoYZGWieP&quot;&gt;https://t.co/eAoYZGWieP&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/notwaldorf&quot;&gt;@notwaldorf&lt;/a&gt; may be the best thing I have ever read&lt;/p&gt;&amp;mdash; Jeff Atwood (@codinghorror) &lt;a href=&quot;https://twitter.com/codinghorror/status/657371215800086529&quot;&gt;October 23, 2015&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async=&quot;&quot; src=&quot;//platform.twitter.com/widgets.js&quot; charset=&quot;utf-8&quot;&gt;&lt;/script&gt;

&lt;p&gt;&lt;br /&gt;
I had my first ever interview, on &lt;a href=&quot;https://usesthis.com/interviews/monica.dinculescu/&quot;&gt;The Setup&lt;/a&gt;. I spoke on my
first ever podcast, &lt;a href=&quot;http://hanselminutes.com/499/understanding-web-components-and-polymer-with-monica-dinculescu&quot;&gt;Hanselminutes&lt;/a&gt;.
I discovered &lt;a href=&quot;https://www.instagram.com/p/9aW5ZxIrBu&quot;&gt;#nailconf&lt;/a&gt;, which reassures me I can be both a giant nerd and have pretty nails. I kept
3 succulents alive, accidentally killed one, and resurrected a fig leaf tree. I saw my first live
baseball and basketball games. I bought a second
&lt;a href=&quot;https://www.instagram.com/p/-VIJ05orDH&quot;&gt;ukulele&lt;/a&gt;. I didn’t work on weekends. I didn’t spoil Star Wars for
anybody. I turned 30.&lt;/p&gt;

&lt;h2&gt;🎉&lt;/h2&gt;
&lt;p&gt;See y’all next year, internet friends!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>&lt;input&gt; I ♡ you, but you're bringing me down</title>
   <link href="http://localhost:4000/posts/a-story-about-input/"/>
   <updated>2015-10-22T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/a-story-about-input</id>
   <content type="html">&lt;p&gt;Some people build furniture. Some people knit. Some people have hobbies that
don’t involve HTML specs from the 90s. I am not those people. So here’s a story
about &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt;, how it got to be the jerk that it is, and why it needs to die in a fire.&lt;/p&gt;

&lt;h2 id=&quot;the-early-years&quot;&gt;The early years&lt;/h2&gt;
&lt;p&gt;1995 was a good year. Friends, ER, Xena were all on TV. TLC had dominated the
charts with “Waterfalls”. Browsers were ok, because HTML was pretty ok. We had
Mosaic, Netscape and IE1, and the &lt;a href=&quot;http://tools.ietf.org/html/rfc1866&quot;&gt;HTML2&lt;/a&gt;
spec was finally getting around to standardizing forms. 1995 was the year
when &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; was born, and now that it’s about old enough to drink, we need to have a talk.&lt;/p&gt;

&lt;p&gt;Input initially came along with 8 types: &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;checkbox&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;radio&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;image&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;hidden&lt;/code&gt;,
&lt;code class=&quot;highlighter-rouge&quot;&gt;submit&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;reset&lt;/code&gt;, and in a separate &lt;a href=&quot;https://www.ietf.org/rfc/rfc1867.txt&quot;&gt;RFC&lt;/a&gt; that followed, &lt;code class=&quot;highlighter-rouge&quot;&gt;file&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Wait, did you say &lt;em&gt;image&lt;/em&gt;? Yeah, let’s talk about it.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;image&quot; src=&quot;cat.png&quot;&amp;gt;&lt;/code&gt; looks like an image, but it’s actually an image
button that also submits the (x,y) coordinates of where you clicked on the image. Unless you don’t specify
a &lt;code class=&quot;highlighter-rouge&quot;&gt;src&lt;/code&gt; file, in which case it’s an “image button” that says “Submit”.
Unless you’re in Firefox, in which case it says “Submit Query” and looks like
a label. Unless you’re in
IE in which case it doesn’t say anything at all.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-22/type-image.png&quot; alt=&quot;input type=image with no source&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Also, for your local pub trivia night, the message that the &lt;code class=&quot;highlighter-rouge&quot;&gt;type=file&lt;/code&gt; input to
indicate you haven’t done anything is “No file chosen”, “no file selected”,
“No file selected”, and just an empty textbox on Chrome, Safari, Firefox and IE respectively.&lt;/p&gt;

&lt;p&gt;Right, ok.&lt;/p&gt;

&lt;h2 id=&quot;and-now-a-textarea-rant&quot;&gt;And now, a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; rant&lt;/h2&gt;
&lt;p&gt;I always thought &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;textarea&lt;/code&gt; came at later dates, and that explained
why they’re kind of insanely different. This is kind of true, since &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt; was
around in Mosaic since at least 1993, and it was a fixed-up implementation of
&lt;code class=&quot;highlighter-rouge&quot;&gt;ISINDEX&lt;/code&gt;. However, on the record, they were both children of the HTML2 spec,
which decided that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; is a self closing tag and uses a &lt;code class=&quot;highlighter-rouge&quot;&gt;value&lt;/code&gt; attribute,
while &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; needs a closing tag and uses its contents, even though they
both just hold text that someone else has entered:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;input&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;value=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;batman&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;textarea&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rows=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;batman&lt;span class=&quot;nt&quot;&gt;&amp;lt;/textarea&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Update: someone pointed out that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;textarea&amp;gt;&lt;/code&gt; needs to support multilines,
and newlines aren’t allowed inside attributes values, which is why it needed
to use its contents. Makes sense!&lt;/p&gt;

&lt;h2 id=&quot;1995-2011-the-slow-years&quot;&gt;1995-2011, the slow years&lt;/h2&gt;
&lt;p&gt;In 1999, &lt;a href=&quot;http://www.w3.org/TR/html401/&quot;&gt;HTML4&lt;/a&gt; only added &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;button&quot;&lt;/code&gt;. My favourite part about
it is that with no custom styles, an &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;button&quot;&amp;gt;&lt;/code&gt; and an
&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;button&quot; value=&quot;Submit&quot;&amp;gt;&lt;/code&gt; on the same line, do not align vertically
on Chrome/Safari/Edge.&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;40px&quot; alt=&quot;input type=button misalignment&quot; src=&quot;/images/2015-10-22/button-align.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;then-everything-got-worse&quot;&gt;Then everything got worse&lt;/h2&gt;
&lt;p&gt;Later, in 2011, the &lt;a href=&quot;http://www.w3.org/html/wg/drafts/html/master/Overview.html&quot;&gt;HTML5&lt;/a&gt; spec added a billion new input types. It’s now 2015, and
most are not implemented. The TL; DR of the missing features is: &lt;code class=&quot;highlighter-rouge&quot;&gt;type=color&lt;/code&gt; only
&lt;a href=&quot;http://caniuse.com/#feat=input-color&quot;&gt;works&lt;/a&gt; on Firefox/Chrome, date/time
inputs only &lt;a href=&quot;http://caniuse.com/#feat=input-datetime&quot;&gt;work&lt;/a&gt; on Chrome/Edge/iOS, and
everything that works on Chrome works on Opera. Here’s a
&lt;a href=&quot;http://output.jsbin.com/mimuko&quot;&gt;demo&lt;/a&gt; of all of the different input types to date,
so that you can compare and sob by yourself.&lt;/p&gt;

&lt;p&gt;Let’s talk about some interesting ones.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=&quot;search&quot;&amp;gt;&lt;/code&gt; has some arbitrary text padding, borders,
and badass mid-2000s-style rounded corners, all of which are inconsistent across all browsers, and almost
impossible to get &lt;a href=&quot;http://tjvantoll.com/2013/04/15/list-of-pseudo-elements-to-style-form-controls/&quot;&gt;rid&lt;/a&gt; of.&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;130px&quot; alt=&quot;input type=search weird default styles&quot; src=&quot;/images/2015-10-22/type-search.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;If you’re on a lucky browser that does support &lt;code class=&quot;highlighter-rouge&quot;&gt;type=&quot;date&quot;&lt;/code&gt;, don’t worry about
styling the date picker — there are 8 weirdo &lt;code class=&quot;highlighter-rouge&quot;&gt;::webkit&lt;/code&gt; pseudo-selectors out there,
but they’ll only let you &lt;a href=&quot;http://tjvantoll.com/2013/04/15/list-of-pseudo-elements-to-style-form-controls/&quot;&gt;style&lt;/a&gt;
the input textbox, and not the actual date dropdown. CSS is bad for your health anyway.&lt;/p&gt;

&lt;h2 id=&quot;just-when-you-thought-it-couldnt-get-any-worse-javascript&quot;&gt;Just when you thought it couldn’t get any worse, JavaScript&lt;/h2&gt;
&lt;p&gt;You see, I can justify CSS quirks. I worked on Chrome for 2 years,
I work next to the Blink team now, I understand we’re all writing different
renderers and they all have their own CSS bugs. However, the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; API isn’t
quirky — it’s literally just a jar of spiders, and the moment you open the jar,
it’s too late. You’re covered in spiders. Even your cat is a spider now. Better find
some fire.&lt;/p&gt;

&lt;p&gt;Since 1995, inputs with type &lt;code class=&quot;highlighter-rouge&quot;&gt;radio&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;checkbox&lt;/code&gt; have
had an extra attribute, &lt;code class=&quot;highlighter-rouge&quot;&gt;checked&lt;/code&gt;, to determine their checked status. Since an &lt;code class=&quot;highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt;
is an &lt;code class=&quot;highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt; is an &lt;code class=&quot;highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt;, this also means that all other
input types have this property; it just gets ignored. So even though it doesn’t
make sense, this is perfectly fine:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input[type=&quot;text&quot;]'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// prints false.&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;textInput&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;checked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// prints true.&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// did not open the hellmouth.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cool. Cool cool cool.&lt;/p&gt;

&lt;p&gt;Inputs also have text, and text can be selected, so the &lt;code class=&quot;highlighter-rouge&quot;&gt;HTMLInputElement&lt;/code&gt;
prototype also defines two properties,
&lt;code class=&quot;highlighter-rouge&quot;&gt;selectionStart&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;selectionEnd&lt;/code&gt; which are two numbers defining your selection
range. So you can do:&lt;/p&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;document&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;querySelector&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'input'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;selectionStart&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And advance the beginning of the text selection by 2 characters. Super pedestrian, except for
the fact that the &lt;code class=&quot;highlighter-rouge&quot;&gt;selectionStart&lt;/code&gt; — and brethren — attribute is only &lt;a href=&quot;https://html.spec.whatwg.org/multipage/forms.html#do-not-apply&quot;&gt;available&lt;/a&gt; for inputs
of type &lt;code class=&quot;highlighter-rouge&quot;&gt;text&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;url&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;password&lt;/code&gt; and just accessing it (not even setting it)
throws an exception for all other types:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Uncaught DOMException: Failed to read the 'selectionStart'
property from 'HTMLInputElement': The input element's type ('number')
does not support selection.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;Even though manually I can totally select that text:&lt;/p&gt;

&lt;p&gt;&lt;img height=&quot;35px&quot; alt=&quot;input type=number with selected text&quot; src=&quot;/images/2015-10-22/type-number.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So in some cases, irrelevant properties can be interacted with, but in
other cases they open the hellmouth. Neat-o. That’s just the kind of consistency
I look for in an API.&lt;/p&gt;

&lt;h2&gt;🙈&lt;/h2&gt;
&lt;p&gt;There’s more. I’m sure there’s more. The thing is, browsers have had &lt;a href=&quot;http://www.martinrinehart.com/frontend-engineering/engineers/html/html-tag-history.html&quot;&gt;21 years&lt;/a&gt;
to sort out inputs, and they haven’t even managed to agree on how to communicate
“you haven’t picked a file”.&lt;/p&gt;

&lt;p&gt;Now imagine the future where Web Components are supported
natively, and someone else is allowed to write a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;better-input&amp;gt;&lt;/code&gt;, an element
that is a real, encapsulated DOM element, and not just a div soup. Imagine using this &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;better-input&amp;gt;&lt;/code&gt;
that isn’t implemented differently in each browser, that looks the same everywhere, and that
probably also knows how to bake you a cherry pie. IMAGINE. ✨&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Styling the Shadow DOM or: a metaphor gone too far</title>
   <link href="http://localhost:4000/posts/styling-the-dome/"/>
   <updated>2015-09-29T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/styling-the-dome</id>
   <content type="html">&lt;p&gt;One of the beefs (and there aren’t many) that I have with CSS is that it has a very weak
opinion about style encapsulation. That opinion is basically “well, name your classes well” or else bad
things happen. Know this: I come from C++, land of rules and disappointed compilers; this hand waviness drives me crazy.&lt;/p&gt;

&lt;p&gt;This matters because now you have to trust the people that write your css libraries
to have common sense. If my website needs two kinds of fancy buttons, which live in  &lt;code class=&quot;highlighter-rouge&quot;&gt;shiny-button.css&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;bouncy-button.css&lt;/code&gt;, which are both libraries
written by silly people who want me to use the &lt;code class=&quot;highlighter-rouge&quot;&gt;.button&lt;/code&gt; class to get their style,
I’m hosed.&lt;/p&gt;

&lt;h2 id=&quot;enter-the-shadow-dom&quot;&gt;Enter the Shadow DOM&lt;/h2&gt;
&lt;p&gt;The &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/&quot;&gt;Shadow DOM&lt;/a&gt; fixes this problem by building a little castle (a dome, get it?) around each custom element, locking in its implementation and styles. This is a proper castle, with a proper moat, so now styles can’t get in and out of it. This means that if &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt; was a custom element instead of a pile of CSS, its &lt;code class=&quot;highlighter-rouge&quot;&gt;.button&lt;/code&gt; class was scoped to the element itself, and wouldn’t stomp over &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;bouncy-button&amp;gt;&lt;/code&gt;’s similarly creatively named &lt;code class=&quot;highlighter-rouge&quot;&gt;.button&lt;/code&gt; class.&lt;/p&gt;

&lt;p&gt;This shouldn’t surprise you too much, as native elements have been doing this in secret for yeaaaaars. &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=date&amp;gt;&lt;/code&gt; styles the date picker somehow, but you’ve never worried what class names it might use to do so. You know why? Because you can’t get to its castle, that’s why.&lt;/p&gt;

&lt;h2 id=&quot;the-struggle-is-real&quot;&gt;The struggle is real&lt;/h2&gt;
&lt;p&gt;So what happens if you &lt;em&gt;do&lt;/em&gt; want to style &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt;? What if it’s a perfectly
respectable button, but it uses Helvetica as its font and you really need it to be Comic Sans because Helvetica is &lt;em&gt;so&lt;/em&gt; 2014?&lt;/p&gt;

&lt;p&gt;You can always style the &lt;em&gt;host&lt;/em&gt; of the element. Think of the host as the castle walls; it’s the thing that holds all the actual contents of the custom element. It still plays by CSS rules, so some of the styles you set on the &lt;em&gt;host&lt;/em&gt; could
actually trickle down to some child elements. For example:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;tomato&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;3px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;width&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;400px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* this will apply to any text in the button,
   * unless a specific child overrides it */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;14px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;What you don’t get to do is peek at the implementation of the &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt; and decide you don’t need one of the nested
&lt;code class=&quot;highlighter-rouge&quot;&gt;div&lt;/code&gt;s it uses. Again, these are the same rules that &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input type=date&amp;gt;&lt;/code&gt; plays by: you can change the &lt;code class=&quot;highlighter-rouge&quot;&gt;input&lt;/code&gt;’s text to be red, but that date picker is what it is (hella ugly).&lt;/p&gt;

&lt;p&gt;When the Shadow DOM was first introduced, people anticipated this styling problem and took the “bring an AK-47 to a knife fight” approach by giving every developer &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/webcomponents/shadowdom-201/#toc-style-cat-hat&quot;&gt;dragons&lt;/a&gt;. These dragons are called &lt;code class=&quot;highlighter-rouge&quot;&gt;/deep/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;::shadow&lt;/code&gt;, and let you cross the moat and tear the shit out of any castle. You
could style anything you wanted in your custom element, because ain’t nobody stopping
dragons. It’s like that moat isn’t even there:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;deep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;fancy-div&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy-class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.button&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, as we know from Game of Thrones, you eventually discover that if you have a dragon, it’s going to start eating all your goats and people will regret giving you a dragon.&lt;/p&gt;

&lt;p&gt;So we deprecated &lt;code class=&quot;highlighter-rouge&quot;&gt;/deep/&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;::shadow&lt;/code&gt; and web developers around the world panicked.&lt;/p&gt;

&lt;h2 id=&quot;bridges-instead-of-dragons&quot;&gt;Bridges instead of dragons&lt;/h2&gt;
&lt;p&gt;The correct answer to “say, how do I cross this moat?” isn’t “lol a dragon”.
It’s a bridge. We’ve been using bridges to cross waters for like 3000 years. Dragons aren’t even real, man.&lt;/p&gt;

&lt;p&gt;CSS variables (aka custom properties) do exactly that. They’re hooks that the developer of a &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/code&gt; has left all over the code,
so that you can change that particular style. Now you, as the user of a custom element no
longer need to know &lt;em&gt;how&lt;/em&gt; that element is implemented. You are given the list of things you can style, and you’re set.&lt;/p&gt;

&lt;p&gt;The code examples use Polymer, which is what I work on, and what I use to write custom elements. The full code, if you want to play along, is &lt;a href=&quot;http://jsbin.com/qubila/edit?html,output&quot;&gt;here&lt;/a&gt; (there’s an embedded JSBin at the bottom of this post, but you know, spoilers).&lt;/p&gt;

&lt;h2 id=&quot;first-a-shiny-button&quot;&gt;First, a shiny button&lt;/h2&gt;
&lt;p&gt;So, here’s our button. It has a bunch of nested silly things, because why not. Who knows how the native &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;input&amp;gt;&lt;/code&gt; actually looks like. Maybe it’s &lt;code class=&quot;highlighter-rouge&quot;&gt;divs&lt;/code&gt; all the way down. Maybe it’s spiders. It’s probably spiders.&lt;/p&gt;

&lt;p&gt;Everything inside &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt;, including &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt; itself is inside the Shadow Castle, so it can’t be reached:&lt;/p&gt;

&lt;div class=&quot;language-html highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;dom-module&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;id=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;shiny-button&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;template&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;style&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nd&quot;&gt;:host&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;display&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;inline-block&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;white&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;cornflowerblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;border-radius&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.icon&lt;/span&gt;      &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;.text-in-the-shadow-dom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/style&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;div&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;container&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;icon&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;♡&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;user-text&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&amp;lt;content&amp;gt;&amp;lt;/content&amp;gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;lt;span&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text-in-the-shadow-dom&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;!!!&lt;span class=&quot;nt&quot;&gt;&amp;lt;/span&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/template&amp;gt;&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;script&amp;gt;&lt;/span&gt;
    &lt;span class=&quot;nx&quot;&gt;Polymer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;({&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;is&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'shiny-button'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;lt;/script&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/dom-module&amp;gt;&lt;/span&gt;
...
&lt;span class=&quot;c&quot;&gt;&amp;lt;!-- somewhere in an index.html, you'd use it like so: --&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;shiny-button&amp;gt;&lt;/span&gt;hallo hai&lt;span class=&quot;nt&quot;&gt;&amp;lt;/shiny-button&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;shiny-button&lt;/code&gt;&amp;gt; looks like the thing on the left. Pretty meh. We’ll do better. We’ll style it
to be the thing on the right, without any 🐲🐲🐲.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;312&quot; alt=&quot;screen shot 2015-08-11 at 3 34 51 pm&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/9212530/97d07e7c-403e-11e5-867e-656ee1fd3cb7.png&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;what-can-you-style-right-now&quot;&gt;What can you style right now?&lt;/h2&gt;
&lt;p&gt;We can only style the &lt;em&gt;host&lt;/em&gt; of the element – this is everything outside the &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt; class, but inside
the shiny button. You know, the walls of the castle.&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Lato&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;To see the difference between the host and the container, we can give the button itself a different
background than the &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt;. The red corners you see are part of the host; the blue parts are
the &lt;code class=&quot;highlighter-rouge&quot;&gt;.container&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img width=&quot;142&quot; alt=&quot;screen shot 2015-08-11 at 3 23 20 pm&quot; src=&quot;https://cloud.githubusercontent.com/assets/1369170/9212326/ed035506-403c-11e5-848a-9b35bbdc8fce.png&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Of course, none of these styles will work, because these &lt;code class=&quot;highlighter-rouge&quot;&gt;divs&lt;/code&gt; are well inside the castle:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;pink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;.text-in-the-shadow-dom&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;and-now-some-bridges&quot;&gt;And now: some bridges&lt;/h2&gt;
&lt;p&gt;We probably want to change the button’s background color, so we’ll create a variable for it, called &lt;code class=&quot;highlighter-rouge&quot;&gt;--shiny-button-background&lt;/code&gt;. Some things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;every Polymer custom property needs to start with a &lt;code class=&quot;highlighter-rouge&quot;&gt;--&lt;/code&gt;, so that Polymer knows you’re not just typing gibberish.&lt;/li&gt;
  &lt;li&gt;I like to include the element name as a prefix to the custom property; I find it useful to remind me what I’m actually styling.&lt;/li&gt;
  &lt;li&gt;I also like documenting these somewhere in a giant docs blurb, so that the element’s users know what to expect. Polymer’s &lt;a href=&quot;https://github.com/PolymerElements/paper-checkbox/blob/master/paper-checkbox.html#L34&quot;&gt;paper-checkbox&lt;/a&gt; is a nice example of this (because I wrote it, obvs).&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now that we know a custom property is available, this is how we would use it, inside the custom element:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.container&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* cornflowerblue is a default colour, in case the user doesn't
   * provide one. You could omit it if it's being inherited from above */&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;background-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;var&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;--shiny-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;cornflowerblue&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;You can think of &lt;code class=&quot;highlighter-rouge&quot;&gt;var&lt;/code&gt; like an eval, which says “apply the value of this custom property, whatever that value is”. And this is how you, the user of the element would actually give it a value:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c&quot;&gt;/* see how much this looks like a normal css property? i.e.
  background: #E91E63; */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--shiny-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#E91E63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;You can add all sorts of hooks for these kinds of “one-off” custom properties. Eventually you will realize that if the thing that should be styled is too generic (the background container of the button) there’s waaaaay too many CSS properties to expose one by one. In that case, you can use a &lt;em&gt;mixin&lt;/em&gt;, which is like a bag of properties that should all be applied at once. By default this bag is empty, so nothing gets applied when defining the custom element:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nc&quot;&gt;.icon&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;font-size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;20px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;@apply(--shiny-button-icon);&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;But the user of the element could start adding things to the bag like this:&lt;/p&gt;

&lt;div class=&quot;language-css highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;shiny-button&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;.fancy&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&quot;Lato&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;font-weight&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;300&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;nl&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;black&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--shiny-button-background&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#E91E63&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c&quot;&gt;/* this is the mixin! the colon and the semicolon are both important */&lt;/span&gt;
  &lt;span class=&quot;py&quot;&gt;--shiny-button-icon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;red&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;padding&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;10px&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;nl&quot;&gt;text-shadow&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;1px&lt;/span&gt; &lt;span class=&quot;m&quot;&gt;#880E4F&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;err&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;
Some tips:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;the mixin is only relevant to the selector it’s being applied to (modulo CSS inheritance rules). As an element author
  it’s your responsability to name this mixin in a way that conveys this. In the example above, &lt;code class=&quot;highlighter-rouge&quot;&gt;--shiny-button-icon&lt;/code&gt;
  implies you’re styling the icon of the button. If instead you’re applying that style to the text, for example,
  you’re being a bad element author, and your users will shame you on social media.&lt;/li&gt;
  &lt;li&gt;mixins aren’t a panacea. If you look at the &lt;a href=&quot;https://github.com/PolymerElements/paper-checkbox/blob/master/paper-checkbox.html#L34&quot;&gt;paper-checkbox&lt;/a&gt;
  example I mentioned before, you’ll notice no mixins at all! This is because the element is fairly restricting, and
  there’s only so many things you can possibly care about styling. That’s when I tend to prefer individual custom properties vs a mixin.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That’s it, that’s all! We can style ALL the things now, AND get style encapsulation,
and not sacrifice any goats to dragons. Aren’t web components amazing? (Yes they are).&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;p&gt;Here’s the JSBin if you want to play with it:
&lt;a class=&quot;jsbin-embed&quot; href=&quot;http://jsbin.com/qubila/embed?html,output&quot;&gt;JS Bin on jsbin.com&lt;/a&gt;&lt;script src=&quot;http://static.jsbin.com/js/embed.min.js?3.34.2&quot;&gt;&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&quot;hear-me-talk-about-this&quot;&gt;Hear me talk about this&lt;/h1&gt;
&lt;p&gt;I gave this talk at the Polymer &lt;a href=&quot;https://www.polymer-project.org/summit&quot;&gt;summit&lt;/a&gt;. Hurray, the metaphor is spreading!&lt;/p&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;
&lt;iframe width=&quot;560&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/IbOaJwqLgog&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;9c0e7a1b528a4293b63e09f1e3c04044&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Keypress is bananas</title>
   <link href="http://localhost:4000/posts/keypress-is-bananas/"/>
   <updated>2015-06-02T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/keypress-is-bananas</id>
   <content type="html">&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event works maddeningly differently in Chrome/Safari and Firefox, and this is the story of how I spent two hours discovering that, so that hopefully you don’t have to.&lt;/p&gt;

&lt;h2 id=&quot;keypress-what&quot;&gt;Keypress what?&lt;/h2&gt;
&lt;p&gt;A &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event is one of the events you get when you mash on the keyboard. It’s special because according to the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;spec&lt;/a&gt;, you should only get a &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for keystrokes that produce printable characters. So you’ll get it for things like letters and symbols, but not for &lt;code class=&quot;highlighter-rouge&quot;&gt;backspace&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;left arrow&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It’s a great event to have if you want to write some as-you-type validation on an input, and you want to be able to dismiss the non-printable characters (which will still generate key events, but are uninteresting to the validation bit).&lt;/p&gt;

&lt;p&gt;Chrome, Safari and IE10 agree with this interpretation, which is great news.&lt;/p&gt;

&lt;p&gt;To be contrarian, Firefox (38; I don’t know about Aurora) &lt;em&gt;always&lt;/em&gt; sends a &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for anything you type. It’s basically a &lt;code class=&quot;highlighter-rouge&quot;&gt;keydown&lt;/code&gt; event from what I see. Now you have to get rid of control characters yourself and you get write code that doesn’t make sense on the other platforms! Yay! (not yay)&lt;/p&gt;

&lt;p&gt;I call shenanigans.&lt;/p&gt;

&lt;h2 id=&quot;mind-your-keycodes-and-charcodes&quot;&gt;Mind your keyCodes and charCodes&lt;/h2&gt;
&lt;p&gt;From looking at the &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/Events/keypress&quot;&gt;spec&lt;/a&gt;, we expect a &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event to have:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode&lt;/code&gt;, a number code that represents the key you’ve pressed. For example, &lt;code class=&quot;highlighter-rouge&quot;&gt;q&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;113&lt;/code&gt;. This is allegedly deprecated, but don’t worry, both Firefox and Chrome implement it, but differently.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;charCode&lt;/code&gt;, the unicode number of the key. This code only exists for &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt;. Like before, it’s deprecated, but like before, it’s implemented by both browsers. Differently.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;, the value of the key represented by the event. According to that spec, this one is unimplemented. Worry not, Firefox implements it just fine (Chrome doesn’t). It is the hero we deserve, but not the one we get right now.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2&gt;😭&lt;/h2&gt;
&lt;p&gt;What you get out of this is spectacularly annoying. I wrote some &lt;a href=&quot;http://output.jsbin.com/tuboguyido/1/&quot;&gt;code&lt;/a&gt; that basically prints out what the &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event looks like, and found:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As promised, in Chrome/Safari/IE10, we only get the &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for printable things. The event always has the same values for &lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;charCode&lt;/code&gt;, and doesn’t have a &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/keypress/chrome.gif&quot; alt=&quot;Chrome keypress events&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;In Firefox, you get the &lt;code class=&quot;highlighter-rouge&quot;&gt;keypress&lt;/code&gt; event for ALL the things, BUT:
    &lt;ul&gt;
      &lt;li&gt;for printable characters, &lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode = 0&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;charCode&lt;/code&gt; has a sane value.&lt;/li&gt;
      &lt;li&gt;for control characters, &lt;code class=&quot;highlighter-rouge&quot;&gt;charCode = 0&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;keyCode&lt;/code&gt; has a sane value.&lt;/li&gt;
      &lt;li&gt;this is super because if you’ve been testing on the other browsers and have been using &lt;code class=&quot;highlighter-rouge&quot;&gt;String.fromCharCode()&lt;/code&gt;, you’re going to get hilariously bad results if you use the wrong code. Like how &lt;code class=&quot;highlighter-rouge&quot;&gt;arrow left&lt;/code&gt; could actually be &lt;code class=&quot;highlighter-rouge&quot;&gt;%&lt;/code&gt;.&lt;/li&gt;
      &lt;li&gt;see how &lt;code class=&quot;highlighter-rouge&quot;&gt;key&lt;/code&gt; is kind of nice though? One day, at a browser near you.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/keypress/firefox.gif&quot; alt=&quot;Chrome keypress events&quot; /&gt;&lt;/p&gt;

&lt;p&gt;There, now you know. And knowing is half the battle.&lt;/p&gt;

&lt;h2 id=&quot;ps&quot;&gt;P.S.&lt;/h2&gt;
&lt;p&gt;If you read this in the future and the future doesn’t work like I said it does, either I was wrong (highly likely), or someone fixed something. Let me know and I can make updates.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Why Chromium has code owners</title>
   <link href="http://localhost:4000/posts/chromium-owners/"/>
   <updated>2015-03-24T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/chromium-owners</id>
   <content type="html">&lt;p&gt;My favourite thing about the Chromium code is this &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/d413b2dcb54d523811d386f1ff4084f677a6d089/chrome/browser/chrome_browser_main_mac.mm#37&quot;&gt;enum&lt;/a&gt; of cats and all the comments in that file. My second favourite thing is &lt;code class=&quot;highlighter-rouge&quot;&gt;OWNER&lt;/code&gt; files. Guess what this post is about (hint: it’s not about cats NOT EVERYTHING IS ABOUT CATS, OK?)&lt;/p&gt;

&lt;p&gt;Edit: In a clear and deliberate conspiracy, the cats have been removed from Chromium. The old new cool thing is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/pickle.h&amp;amp;q=pickle&amp;amp;sq=package:chromium&amp;amp;type=cs&amp;amp;l=138&quot;&gt;pickles&lt;/a&gt;, and the new new cool thing is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/mac/objc_property_releaser_unittest.mm&amp;amp;l=16&quot;&gt;Count Von Counts&lt;/a&gt;. Bonus points to @thakis for finding that last one. 💁&lt;/p&gt;

&lt;h2 id=&quot;why-should-you-care&quot;&gt;Why should you care?&lt;/h2&gt;
&lt;p&gt;Owners in Chromium are people who own an area of code. This can be a small feature (the &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome://settings&lt;/code&gt; page) or a giant area (all of the Cocoa UI). You don’t &lt;em&gt;have&lt;/em&gt; to be an owner to be successful – you get to be an owner because you &lt;em&gt;want&lt;/em&gt; to. This usually means that you have contributed a lot to that particular nugget of code, have acquired a slightly unhealthy obsession for it (symptoms: if you’ve whispered “my precious” to a line of code in the last hour, you will make a great code owner one day), and generally care about its well being. I have been trying (unsuccessfully) for years to be an owner of pizza; hit me up if you have any leads.&lt;/p&gt;

&lt;p&gt;Owners are gatekeepers of code, and their main responsibility is making sure the code doesn’t go to shit. Comments that make sense. No copy pasting, no hacks, no soup for you. None of that “I don’t really know how to make this code better so I’m going to merge it and run” nonsense. They are the very model of a modern Major-General, they know the kings of England, and they quote the fights historical.&lt;/p&gt;

&lt;p&gt;TL; DR: owners won’t let you merge crappy code. Imagine if each of the 2000 Chromium commiters merged a random hack in one of the 7 million lines of code we have. IMAGINE. 🔥🔥🔥&lt;/p&gt;

&lt;h2 id=&quot;what-it-means-for-owners&quot;&gt;What it means for owners&lt;/h2&gt;
&lt;p&gt;Realtalk: being an owner means that people will send you a lot of code to review, because your blessing (or “LGTM”) is required for that code to be committed. &lt;a href=&quot;https://codereview.chromium.org/search?closed=1&amp;amp;owner=&amp;amp;reviewer=sky%40chromium.org&amp;amp;cc=&amp;amp;repo_guid=&amp;amp;base=&amp;amp;project=&amp;amp;private=1&amp;amp;commit=1&amp;amp;created_before=&amp;amp;created_after=&amp;amp;modified_before=&amp;amp;modified_after=&amp;amp;order=&amp;amp;format=html&amp;amp;keys_only=False&amp;amp;with_messages=False&amp;amp;cursor=&amp;amp;limit=30&quot;&gt;@sky&lt;/a&gt; is an owner of the Windows UI code, and he does something like 500+ reviews a quarter. And also writes code. And helps me out when I (invariably) break the UI. He’s pretty much the best.&lt;/p&gt;

&lt;p&gt;Basically:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;People will ask you general questions when they’re stuck. It’s totally fine not to know the answer – you’ll probably at least know who to point them at.&lt;/li&gt;
  &lt;li&gt;Whenever shit hits the fan and it’s on your turf of code, if no obvious culprit is to be found, you win the lottery and get to fix it. Spoilers: this sometimes means fixing things that you didn’t actually break. Currently, I’m on day 6 of this giant yak shave that I won by fixing a random crash. Regrets, I am them.&lt;/li&gt;
  &lt;li&gt;You get to live the dream and be picky about code. Don’t like a method’s name? A particular comment? Think that there’s a bit of a refactor needed to make this better? You get to ask for it, and guess what: people usually have to listen.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;👉 Developers trust owners to not be insane. Owners trust developers not to try to commit stuff behind their back. This is why it works. 👈&lt;/p&gt;

&lt;h2 id=&quot;what-it-means-for-developers&quot;&gt;What it means for developers&lt;/h2&gt;
&lt;p&gt;First, when you’re stuck, you know who to ask questions (an owner!). Second, in order for you to commit any code, you need to get the owners’ approval for your changes.&lt;/p&gt;

&lt;p&gt;Here’s an &lt;a href=&quot;https://codereview.chromium.org/861053004&quot;&gt;example&lt;/a&gt; of a code review. I like to explicitly &lt;a href=&quot;https://codereview.chromium.org/861053004/#msg11&quot;&gt;mention&lt;/a&gt; which owner should review which file, because one person might own multiple files/areas in a given CL (if you’re a &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser&lt;/code&gt; owner, you own ALL of the things), but might not be required to review all of them.&lt;/p&gt;

&lt;p&gt;So, who owns &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_info_cache.cc&lt;/code&gt;? Everyone named in the &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/profiles/OWNERS&lt;/code&gt; file. On top of that, everyone up the directory tree (so in &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/OWNERS&lt;/code&gt;) is also an owner. If you stumble on a directory that doesn’t have an owners file (for example &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa/profiles&lt;/code&gt;), just crawl on up until you find the closest one (in this case, you would add an owner from &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa/OWNERS&lt;/code&gt;. This is also useful if you do a fairly innocent refactor that touches a lot of files, like renaming a method. In that case, rather than adding 17 different owners, you can just get one, root owner and run with that.&lt;/p&gt;

&lt;h2 id=&quot;how-you-can-get-owner-files-in-your-project&quot;&gt;How YOU can get owner files in your project&lt;/h2&gt;
&lt;p&gt;If you want to implement owner files for your projects (YAY!), you need to do a couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Add some sort of presubmit check so that people can’t commit code without getting all their ducks in a row. If you give people a chance to merge code under the radar, they will. So, don’t.&lt;/li&gt;
  &lt;li&gt;Here’s the Chromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/PRESUBMIT.py&amp;amp;l=996&quot;&gt;script&lt;/a&gt;. It will probably most likely not work out of the box, but it could be a useful starting point.&lt;/li&gt;
  &lt;li&gt;Create OWNER files in all the directories that makes sense. Format them in a way that scripts can read them. Here are &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#search/&amp;amp;q=OWNERS&amp;amp;type=cs&amp;amp;sq=package:chromium&quot;&gt;all&lt;/a&gt; the Chromium ones.&lt;/li&gt;
  &lt;li&gt;Owner files can have rules &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/profiles/OWNERS&amp;amp;l=1&quot;&gt;per subdirectory&lt;/a&gt; but also &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/profiles/OWNERS&amp;amp;l=15&quot;&gt;per file&lt;/a&gt;. For really tedious file changes (like build files), any committer can be an owner using &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/common/OWNERS&amp;amp;l=4&quot;&gt;wildcards&lt;/a&gt;).&lt;/li&gt;
  &lt;li&gt;Make sure the owner files are up to date: when people leave teams, remove them. When people start becoming friendly with an area of code, let them know that ownership is an option.&lt;/li&gt;
  &lt;li&gt;Watch how your code gets better over time.&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Contributing to Chromium: an illustrated guide</title>
   <link href="http://localhost:4000/posts/chromium-101/"/>
   <updated>2015-02-10T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/chromium-101</id>
   <content type="html">&lt;p&gt;I gave a talk about how to get started contributing to Chromium, but it wasn’t recorded,
and my &lt;a href=&quot;https://speakerdeck.com/notwaldorf/contributing-to-chromium&quot;&gt;slides&lt;/a&gt; by themselves look like cold-medicine induced hallucinations
(which, to be fair, they were). So instead, here is a giant blog post that will take you
through every step from “checking out the code” to “landing the code in the Chromium repo”. It will also come in super handy for mild to moderate cases of insomnia.&lt;/p&gt;

&lt;p&gt;If you just want a TL;DR or a refresher of the commands you might need, check out the [slides] (https://speakerdeck.com/notwaldorf/contributing-to-chromium). They’re basically bullet points without the running commentary.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Warning&lt;/strong&gt;: this is a long post. The bug we’re fixing is silly, but will get
us writing actual Chromium code. If you want a
real good-first-bug to fix after this, &lt;a href=&quot;https://code.google.com/p/chromium/issues/list?q=Hotlist:GoodFirstBug&quot;&gt;here&lt;/a&gt; is a nice list. Usually unassigned bugs (with no owner) are free for the taking, but it can also happen that a bug will be assigned to a human who is not actually working on it. Check the activity on it – if there haven’t been any activities in a while, leave a message on the bug or ping the owner and tell them you’d like to work on it!&lt;/p&gt;

&lt;h2 id=&quot;get-your-computer-ready&quot;&gt;Get your computer ready&lt;/h2&gt;

&lt;p&gt;Chrome is giant. It needs a beefy machine (we recommend a 64-bit OS, with at least 8GB of RAM. A separate SSD to hold/build your code will make your life infinitely more pleasant), and a couple dozen goat sacrifices. Even then, building Chromium from scratch is slow. Snails run the half mile faster (fact). This is something you might as well get used to.&lt;/p&gt;

&lt;p&gt;We have a pretty solid set of &lt;a href=&quot;http://www.chromium.org/developers/how-tos/get-the-code&quot;&gt;instructions&lt;/a&gt; on
how to get everything set up. I promise you this page has been used and reviewed a billion times, it’s up to date,
and every step in it is important. Don’t skip steps because you think you don’t need them. You do.&lt;/p&gt;

&lt;p&gt;However, I’ll tell you about the custom &lt;a href=&quot;https://github.com/notwaldorf/not-quite-dotfiles/blob/master/chrome&quot;&gt;things&lt;/a&gt; that I use that &lt;em&gt;aren’t&lt;/em&gt; on that page, which I’m pretty proud of.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;I always build &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; builds, because they’re faster. This means I don’t get as many debug symbols as I would like. That’s fine for me, because I’m a chicken
 and pretty scared of &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt;, and I debug with &lt;code class=&quot;highlighter-rouge&quot;&gt;printfs&lt;/code&gt; like this is the 80s anyway&lt;/li&gt;
  &lt;li&gt;&lt;del&gt;I’ve added &lt;code class=&quot;highlighter-rouge&quot;&gt;component=shared_library&lt;/code&gt; (so that incremental builds are super fast) and &lt;code class=&quot;highlighter-rouge&quot;&gt;dcheck_always_on=1&lt;/code&gt; (so that even though I have
 a &lt;code class=&quot;highlighter-rouge&quot;&gt;Release&lt;/code&gt; build, debug asserts still get hit) to my &lt;code class=&quot;highlighter-rouge&quot;&gt;GYP_DEFINES&lt;/code&gt;.  &lt;a href=&quot;http://www.chromium.org/developers/gyp-environment-variables&quot;&gt;Here&lt;/a&gt; are all the ways in which you can set up your &lt;code class=&quot;highlighter-rouge&quot;&gt;GYP_DEFINES&lt;/code&gt;. I use the &lt;code class=&quot;highlighter-rouge&quot;&gt;chromium.gyp_env&lt;/code&gt; way on Windows (because I don’t understand &lt;code class=&quot;highlighter-rouge&quot;&gt;PATH&lt;/code&gt; variables) and the &lt;code class=&quot;highlighter-rouge&quot;&gt;Environment Variable&lt;/code&gt; way on Mac/Linux, because I sort of understand &lt;code class=&quot;highlighter-rouge&quot;&gt;exports&lt;/code&gt;. Realtalk, I really don’t know any Windows, and I’m ok with that&lt;/del&gt;. Chromium switched to &lt;code class=&quot;highlighter-rouge&quot;&gt;gn&lt;/code&gt;; check &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md#Faster-builds&quot;&gt;this&lt;/a&gt; out for how to enable the component build with &lt;code class=&quot;highlighter-rouge&quot;&gt;gn&lt;/code&gt;. The bit about me not knowing any Windows is still true, though.&lt;/li&gt;
  &lt;li&gt;I have a fancy set of &lt;a href=&quot;https://github.com/notwaldorf/not-quite-dotfiles/blob/master/chrome#L15&quot;&gt;aliases&lt;/a&gt; like &lt;code class=&quot;highlighter-rouge&quot;&gt;make_&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;go_&lt;/code&gt;, so that I don’t have to
 remember about which flags I want to run Chrome with. They come in &lt;code class=&quot;highlighter-rouge&quot;&gt;doskey&lt;/code&gt; variants on Windows&lt;/li&gt;
  &lt;li&gt;Don’t use cygwin on Windows. It doesn’t play nice with the &lt;code class=&quot;highlighter-rouge&quot;&gt;depot_tools&lt;/code&gt;&lt;/li&gt;
  &lt;li&gt;I use Atom, and have used Sublime as an editor. Last time I checked, XCode beach balled, huffing and puffing, when trying to load the code. Visual Studio works pretty well if you can stand Windows and its insane command prompt. You can use ctags if you want; I don’t. I use a dumb editor, and find code through
&lt;code class=&quot;highlighter-rouge&quot;&gt;git grep&lt;/code&gt; and the Chromium &lt;a href=&quot;https://code.google.com/p/chromium/codesearch&quot;&gt;codesearch&lt;/a&gt;, because I’m metal like that. You can use anything you want. Literally nobody cares.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Edit&lt;/strong&gt; (Aug 9, 2016): Chromium just switched to &lt;code class=&quot;highlighter-rouge&quot;&gt;gn&lt;/code&gt;, which means some of the comments below don’t apply. Check these &lt;a href=&quot;https://chromium.googlesource.com/chromium/src/+/master/docs/mac_build_instructions.md&quot;&gt;mac build instructions&lt;/a&gt; for how to make your build fast again, using &lt;code class=&quot;highlighter-rouge&quot;&gt;gn&lt;/code&gt;.
&lt;strong&gt;Edit&lt;/strong&gt; (Feb 17, 2016): I wrote a detailed &lt;a href=&quot;https://github.com/notwaldorf/ama/issues/34#issuecomment-185038702&quot;&gt;answer&lt;/a&gt; that contains a whole bunch of extra tricks to make builds faster.&lt;/p&gt;

&lt;h2 id=&quot;get-your-body-ready&quot;&gt;Get your body ready&lt;/h2&gt;
&lt;p&gt;Chromium has a &lt;a href=&quot;http://www.chromium.org/developers/coding-style&quot;&gt;code style&lt;/a&gt;. Do
not panic if your first review will have 20 comments that are code style nits. It’s
absolutely normal, and nobody thinks less of you. On the contrary, we try to be
extra picky with new people, so that they learn everything as quickly as possible.&lt;/p&gt;

&lt;p&gt;Chromium is hard. I’ve been working on it for two years, and it’s still hard.
There’s a loooot of code, and you’ll spend a fair bit of time looking for the right
bit of code you care about. Don’t be afraid to ask questions if you’re stuck. It took me &lt;em&gt;forever&lt;/em&gt; not to be scared of asking questions, but it turns out all the
people that told me that everyone is nice and helpful were right: everyone IS nice
and helpful, because at some point they were you, the code was as scary then as it is now, and the compiler has never stopped barfing errors since the day it was born.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;IRC: there’s a &lt;a href=&quot;http://echelog.com/logs/browse/chromium&quot;&gt;#chromium&lt;/a&gt; room for dev-related questions. It’s a bit of a zombieland outside of PST hours&lt;/li&gt;
  &lt;li&gt;mailing list: &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!forum/chromium-dev&quot;&gt;chromium-dev@google.com&lt;/a&gt;. I strongly recommend to search the archives before you ask a new question. A lot of common things have been asked, and people tend to get a bit grumpy if you ask “how do I get infinite quota  translate API keys” for literally the thousandth time&lt;/li&gt;
  &lt;li&gt;if you’re still stuck and panicked, email &lt;a href=&quot;mailto:noms@chromium.org&quot;&gt;me&lt;/a&gt;. I might not know the answer, and I might be super busy, but I promise to be nice and help in whichever way I can. Gifs of animals doing silly things are encouraged&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;omg-lets-write-some-code&quot;&gt;OMG let’s write some code!&lt;/h2&gt;

&lt;p&gt;We’re going to add a button to Chrome. It’s going to be the best thing ever (second to a freshly opened can of Pringles). For realsies. It will be in this bubble here, and it will open &lt;a href=&quot;http://canihaveapony.com/&quot;&gt;http://canihaveapony.com/&lt;/a&gt; (you’re welcome) in a new tab. This is the before and after:&lt;/p&gt;

&lt;p&gt;&lt;img tabindex=&quot;0&quot; width=&quot;656&quot; src=&quot;/images/chromium/before_after.png&quot; alt=&quot;The before image has 2 buttons in the Chrome profile menu, 'switch person' and 'go incognito'. The after image has a third button, 'Can I have a pony?', with a star icon, that has been inserted above the other 2 buttons.&quot; /&gt;&lt;/p&gt;

&lt;p&gt;(side note: if you don’t see that button in your dev build of Chromium, launch it with &lt;code class=&quot;highlighter-rouge&quot;&gt;--enable-new-avatar-menu&lt;/code&gt;. The UI is enabled by default on all of the released Chromes through a server side flag, but that bit of magic doesn’t run on dev builds, so you need to turn it on yourself)&lt;/p&gt;

&lt;p&gt;I chose this dialog because the easiest way to find your way through code is for there to be a searchable string in there like “Switch Person”. Also I wrote this bubble, so it’s Pretty Clutch™.&lt;/p&gt;

&lt;h4 id=&quot;0-make-a-branch&quot;&gt;0. Make a branch&lt;/h4&gt;
&lt;p&gt;First things first: &lt;em&gt;always&lt;/em&gt; create a new branch for every bug/feature/bit of code you’re working on. Working directly
on the master branch is bad news bears: 1) it’s very unlikely you’re working on one thing at a time, 2) pulling new code from the remote master to your local repo becomes an adventure. .&lt;strong&gt;TL; DR&lt;/strong&gt;: don’t work on master evar. So,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(´ ▽｀).。ｏ♡ src on master ❥ git checkout -b add-pony-button origin/master
Branch add-pony-button set up to track remote branch master from origin by rebasing.
Switched to a new branch 'add-pony-button'
(´ ▽｀).。ｏ♡ src on add-pony-button ❥
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h4 id=&quot;1-find-the-code&quot;&gt;1. Find the code&lt;/h4&gt;
&lt;p&gt;Hooman, meet &lt;a href=&quot;https://code.google.com/p/chromium/codesearch&quot;&gt;codesearch&lt;/a&gt;. It’s your best friend in Chromium. It knows where all the codes are and who they’re called by, and where interfaces get implemented. I spend so much time with it, I’ll probably send it a Valentine’s Day card this year. Anyway, search for “Switch Person” in there, and get these results&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/chromium/codesearch#search/&amp;amp;q=%22switch%20person%22&amp;amp;sq=package:chromium&amp;amp;type=cs&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/codesearch_1.png&quot; alt=&quot;The search gives two results, described below&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;First, &lt;code class=&quot;highlighter-rouge&quot;&gt;generated_resources.grd&lt;/code&gt; is where most of the
strings in Chrome live. A giant file makes
internationalization sooper easy – you hand out the file to translators, they
give you back the same file in a different language, and at startup, Chrome
decides which file to load based on its locale. Bingo bango, localized UI.&lt;/p&gt;

&lt;p&gt;Some of the results have &lt;code class=&quot;highlighter-rouge&quot;&gt;ACCESSIBLE_NAME&lt;/code&gt; in them, which means that they’re accessibility strings (hint: they’re read out loud by VoiceOver apps). &lt;code class=&quot;highlighter-rouge&quot;&gt;IDS_PROFILES_SWITCH_USERS_BUTTON&lt;/code&gt; looks promising though, so let’s see where it’s used.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://code.google.com/p/chromium/codesearch#search/&amp;amp;q=IDS_PROFILES_SWITCH_USERS_BUTTON&amp;amp;sq=package:chromium&amp;amp;type=cs&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/codesearch_2.png&quot; alt=&quot;The files that are relevant and appear in the search are 'profile_chooser_view.cc' and 'profile_chooser_controller.mm'&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Aside from the &lt;code class=&quot;highlighter-rouge&quot;&gt;generated_resources.grd&lt;/code&gt; results from before, we have &lt;em&gt;two&lt;/em&gt; new files!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/ui/views/profiles/profile_chooser_view.cc&lt;/code&gt; – This is in a &lt;code class=&quot;highlighter-rouge&quot;&gt;ui&lt;/code&gt;
  subfolder, which means it’s a UI related file (good sign), so probably a dialog or a bubble. On
  top of that, it’s a &lt;code class=&quot;highlighter-rouge&quot;&gt;.cc&lt;/code&gt; file in a &lt;code class=&quot;highlighter-rouge&quot;&gt;views&lt;/code&gt; folder, which means it’s Windows/Linux code&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa/profiles/profile_chooser_controller.mm&lt;/code&gt; – The &lt;code class=&quot;highlighter-rouge&quot;&gt;.mm&lt;/code&gt; is
  a dead give-away this is a Mac UI file. On OSX we write our UI in Objective-C and drink a lot of wine to forget&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I’m doing this demo on the Mac, so let’s look at &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_chooser_controller.mm&lt;/code&gt;. I’ve
written both of these files, so I promise you they’re SUPER similar.&lt;/p&gt;

&lt;h4 id=&quot;2-adding-a-button&quot;&gt;2. Adding a button&lt;/h4&gt;

&lt;p&gt;Ok, so now I’m looking at &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_chooser_controller.mm&lt;/code&gt; and here’s how my brain would start nomming this code: that string ID is used in a button that
lives in a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;-createOptionsViewWithRect:&lt;/code&gt;. This method is called by
&lt;code class=&quot;highlighter-rouge&quot;&gt;-buildProfileChooserView:&lt;/code&gt;, which in turn is called by &lt;code class=&quot;highlighter-rouge&quot;&gt;-initMenuContentsWithView:&lt;/code&gt;. You
can go down this rabbit hole for days, but the basic idea is that this is clearly the place where we draw buttons in this bubble.&lt;/p&gt;

&lt;p&gt;If we look at &lt;code class=&quot;highlighter-rouge&quot;&gt;-createOptionsViewWithRect:&lt;/code&gt; in particular, it
does the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;creates a drawing rectangle that’s of a fixed width and fixed height. This is the
  size of each of those buttons. If you’re not familiar with Cocoa (who can blame you),
  the way this works is that we draw everything in
  relative coordinates. We’re basically going to keep this rectangle fixed, and just
  change the &lt;code class=&quot;highlighter-rouge&quot;&gt;y&lt;/code&gt; coordinate at which we’re drawing. Also: &lt;code class=&quot;highlighter-rouge&quot;&gt;y=0&lt;/code&gt; is the bottom of the screen,
  and &lt;code class=&quot;highlighter-rouge&quot;&gt;y=a billion&lt;/code&gt; is the top of the screen, and we always draw bottom to top.
  Say it with me, “because Cocoa”.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;-hoverButtonWithRect:&lt;/code&gt; is a utility function that draws a fancy button with a text,
  an image, and an action selector (that’s Cocoa-speak for “click handler”)&lt;/li&gt;
  &lt;li&gt;If we’re allowed to display the lock button, it creates and draws &lt;code class=&quot;highlighter-rouge&quot;&gt;lockButton&lt;/code&gt;.
  Spoilers: &lt;code class=&quot;highlighter-rouge&quot;&gt;displayLock&lt;/code&gt; is &lt;code class=&quot;highlighter-rouge&quot;&gt;false&lt;/code&gt; unless you do some Chrome gymnastics I honestly don’t recommend, because they’re way less fun than they sound&lt;/li&gt;
  &lt;li&gt;If we’re allowed to display the incognito button (we are), create and draw it&lt;/li&gt;
  &lt;li&gt;Finally, create and draw a button whose string is “Exit Guest” if we’re a Guest session, or “Switch person” otherwise&lt;/li&gt;
  &lt;li&gt;Did you see how we drew everything bottom to top? Yeah. That’s a thing.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Hey! We should do the same thing! Let’s add our &lt;code class=&quot;highlighter-rouge&quot;&gt;ponyButton&lt;/code&gt; right below the
&lt;code class=&quot;highlighter-rouge&quot;&gt;switchUsersButton&lt;/code&gt; (which, again, means it’s being drawn above it ARE YOU HAVING FUN YET???). The highlighted bits are the new code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-1-creating-a-pony-button-mm&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/code_button.png&quot; alt=&quot;Code showing how to instantiate a pony button&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The code we just wrote says that when you click on the &lt;code class=&quot;highlighter-rouge&quot;&gt;ponyButton&lt;/code&gt;, we call a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;-goPoniesGo:&lt;/code&gt;. We should probably write it, so that we can actually test our code. It will only log something to the console for now, because logging code is the best code.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-2-adding-the-go-ponies-go-handler-mm&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/pony_code_1.png&quot; alt=&quot;Code showing how to create the click handler, and add a logging statement to it&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you build and run this, your bubble should look like the “after” image described before,
and clicking the button should spew things on the console.&lt;/p&gt;

&lt;h4 id=&quot;3-making-the-button-go&quot;&gt;3. Making the button go&lt;/h4&gt;
&lt;p&gt;This bit is a leap of faith. We want to open a URL in a new tab, but we don’t
really know how. If you search for things like &lt;code class=&quot;highlighter-rouge&quot;&gt;open in new tab&lt;/code&gt;, you can hope
to hit some comments, but &lt;code class=&quot;highlighter-rouge&quot;&gt;tabs&lt;/code&gt; are kind of like the prom queen of the browser so you’re going to get a crap load of useless results. Unfortunately for us, I know that we’re looking for a method called &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome::ShowSingletonTab&lt;/code&gt; (in &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/ui/singleton_tabs.cc&lt;/code&gt;). Had I not known this, I think I would have found it, for example, by checking how the
“Settings” item in the hot dog menu (or hamburger menu, call it whatever food you wish) opens the “chrome://settings” tab. It will take some digging.&lt;/p&gt;

&lt;p&gt;If you don’t know how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;ShowSingletonTab()&lt;/code&gt;, I would &lt;code class=&quot;highlighter-rouge&quot;&gt;codesearch&lt;/code&gt; again for different
uses of the function. This time, just by looking at the method signature, we
can figure out we should write:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-3-implementing-the-go-ponies-go-handler-mm&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/pony_code_2.png&quot; alt=&quot;Code showing how to add a line to the click handler to open a new tab&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Because the stars aligned and Mercury wasn’t in retrograde, we had all
of the &lt;code class=&quot;highlighter-rouge&quot;&gt;.h&lt;/code&gt; header files already included for this to work. Compile it, run it, and get a pony!&lt;/p&gt;

&lt;h2 id=&quot;send-your-code-for-review&quot;&gt;Send your code for review&lt;/h2&gt;
&lt;p&gt;I don’t know about you, but I’m preeeeeeetty proud of this feature, so I feel we’re ready to send it for review!
Run &lt;code class=&quot;highlighter-rouge&quot;&gt;git commit -am &quot;added pony button&quot;&lt;/code&gt; to commit this file, and &lt;code class=&quot;highlighter-rouge&quot;&gt;git cl upload&lt;/code&gt; to upload it to &lt;a href=&quot;https://codereview.chromium.org/&quot;&gt;codereview&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In your &lt;code class=&quot;highlighter-rouge&quot;&gt;git cl upload&lt;/code&gt; message, write a meaningful description, a crbug ID, and a blurb about how to
test this. This is what I would write:&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://gist.github.com/notwaldorf/9dda1a00709cc24a5b02#file-4-sample-cl-description-text&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/cl_description.png&quot; alt=&quot;Sample CL description. It has a title which is less than 72 characters, a summary, a crbug id, and detailed testing instructions&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;And if that goes well, this is what your CL (stands for change-list. Comes from the dark days of Perforce) should look like on the site! (that CL doesn’t exist anymore, but here’s a &lt;a href=&quot;https://codereview.chromium.org/1042923003/&quot;&gt;random&lt;/a&gt; CL as an example)&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://codereview.chromium.org/1042923003/&quot;&gt;&lt;img width=&quot;656&quot; src=&quot;/images/chromium/codereview_1.png&quot; alt=&quot;Sample CL as it renders on codereview&quot; /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;If you want to test that your CL didn’t break anything, run &lt;code class=&quot;highlighter-rouge&quot;&gt;git cl try&lt;/code&gt;. This will look at what your code touches and run a whole bunch of tests on a whole bunch of platforms.&lt;/p&gt;

&lt;p&gt;In Chromium, code lands only after it’s been &lt;code class=&quot;highlighter-rouge&quot;&gt;LGTM-ed&lt;/code&gt;, which means that someone has reviewed it and gave you the thumbs up. If you don’t know to whom to send it for review, pick someone
from your file’s OWNERS. In this case, look at the OWNERS file in &lt;code class=&quot;highlighter-rouge&quot;&gt;chrome/browser/ui/cocoa&lt;/code&gt;. Owners are people who are responsible for the code,
so they tend to know it best. If they’re too busy for a review or aren’t
entirely familiar with your particular part of the code, they can direct you to
a better reviewer.&lt;/p&gt;

&lt;p&gt;(Side note: please don’t &lt;em&gt;actually&lt;/em&gt; send this pony code out for review. People will be very confused, and not necessarily amused.)&lt;/p&gt;

&lt;h2 id=&quot;ship-it-squirrel-&quot;&gt;Ship it, squirrel! &lt;img class=&quot;emoji&quot; title=&quot;:shipit:&quot; alt=&quot;:shipit:&quot; src=&quot;https://assets-cdn.github.com/images/icons/emoji/shipit.png&quot; height=&quot;30&quot; width=&quot;30&quot; /&gt;&lt;/h2&gt;
&lt;p&gt;When your CL is reviewed and ready to go, all you have to do is check the “Commit” checkbox, and the commit-queue bots will take care of it. This means that they will run a whole bunch of unit tests again, and if they all pass (or “come up green”), merge your code into the current master branch.&lt;/p&gt;

&lt;h4 id=&quot;oh-noes-trouble&quot;&gt;Oh noes, TROUBLE&lt;/h4&gt;
&lt;p&gt;Sometimes, something goes wrong (or even better, horribly wrong). Your bots could come up red, and then you’ll
get an email from the &lt;code class=&quot;highlighter-rouge&quot;&gt;commit-bot&lt;/code&gt; telling you your CL couldn’t land, because you done bungled some tests. This is totally fine – you didn’t break anything yet, because your code wasn’t merged.
Either your tests are actually broken, or some code got committed before you
and you need to rebase, or maybe you’ve just encountered a flaky test and don’t need to do anything. You can go back to your CL, fix your tests, and re-check the
“Commit” box.&lt;/p&gt;

&lt;p&gt;Sometimes you’ll even get to break the tree. I recently tried to land a change
where all my bots were green and as soon as the change landed, it broke 165 tests on each bot. Suuuup.&lt;/p&gt;

&lt;p&gt;It happens. You can revert your CL if you realize this in time, or that day’s sheriff might do it for you (especially if you’re an external committer, aren’t on IRC, etc). In this case, be nice to the sheriff and apologize a bit. Maybe send them a gif. Remember: if you’re stuck, ask for help!&lt;/p&gt;

&lt;h2 id=&quot;good-first-bugs&quot;&gt;Good first bugs&lt;/h2&gt;
&lt;p&gt;We have a &lt;a href=&quot;https://code.google.com/p/chromium/issues/list?can=2&amp;amp;q=Hotlist%3DGoodFirstBug+&amp;amp;colspec=ID+Pri+M+Cr+Status+Owner+Summary+OS+Modified&amp;amp;x=m&amp;amp;y=releaseblock&amp;amp;cells=tiles&quot;&gt;list&lt;/a&gt; of bugs deemed as “good starter bugs”. Sometimes they’re more complicated that we thought, so don’t panic if that’s the case. It’s not you, it’s Chrome :). Protip: in the statuses, “Assigned” with a name in the owner means someone is actually looking at that issue, so it’s probably not a great one to pick.&lt;/p&gt;

&lt;h2 id=&quot;your-turn&quot;&gt;Your turn!&lt;/h2&gt;
&lt;p&gt;That’s it! That’s how you commit code to Chromium! Good luck, and if you do end up landing a CL, send me an &lt;a href=&quot;mailto:noms@chromium.org&quot;&gt;email&lt;/a&gt; or a &lt;a href=&quot;https://twitter.com/notwaldorf&quot;&gt;tweet&lt;/a&gt;. I’d love to see it!&lt;/p&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;e0aa6a0aee1a4a20bd8962ae1d05fa81&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Cat-DNS: learning about DNS with cats</title>
   <link href="http://localhost:4000/posts/cat-dns-cascadia/"/>
   <updated>2014-08-11T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/cat-dns-cascadia</id>
   <content type="html">&lt;p&gt;I talked about &lt;a href=&quot;https://github.com/notwaldorf/cat-dns&quot;&gt;Cat-DNS&lt;/a&gt; at &lt;a href=&quot;http://2014.cascadiajs.com/&quot;&gt;Cascadia.js&lt;/a&gt;, and it wasn’t terrible! There is a video. Of me talking! On the internet! What a future we live in.&lt;/p&gt;

&lt;h2&gt;=^..^=&lt;/h2&gt;
&lt;p&gt;The internet needs more cats. DNS servers are the authority on all things internet.
Therefore, the best DNS server is the one that resolves everything to cats. This talk is about that.&lt;/p&gt;

&lt;p&gt;We’re going to walk through the basics and find out how DNS servers work, how you can talk to a
DNS server if you’re a browser, and how to talk back to a browser if you are a DNS server. I’ll show you how you
can write your own DNS server in less than 200 lines of JavaScript, but perhaps most importantly, why you probably
shouldn’t.&lt;/p&gt;

&lt;p&gt;And have I mentioned the cats? There are definitely cats.&lt;/p&gt;

&lt;h2 id=&quot;video&quot;&gt;Video&lt;/h2&gt;
&lt;iframe width=&quot;640&quot; height=&quot;360&quot; src=&quot;//www.youtube.com/embed/qDPhW9P44fI&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;slides&quot;&gt;Slides&lt;/h2&gt;
&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;0a9dcc20fbdc013102b94a47441122ce&quot; data-ratio=&quot;1.77777777777778&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>I don't really want to learn lldb, I just want to fix a crash</title>
   <link href="http://localhost:4000/posts/unscary-lldb/"/>
   <updated>2014-06-23T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/unscary-lldb</id>
   <content type="html">&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt; stands for Llama-DB, and is a database of llamas you can use to debug programs
compiled with &lt;code class=&quot;highlighter-rouge&quot;&gt;clang&lt;/code&gt; (lldb is to clang like gdb is to gcc). If you already know how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;gdb&lt;/code&gt;, then
here’s a &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html&quot;&gt;translation&lt;/a&gt; of the common commands.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Disclaimer&lt;/strong&gt;: There is a &lt;em&gt;ton&lt;/em&gt; of tutorials and pages about all of the
awesome features and commands of &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt;, and how to become a debugging pro.
This is not that. This is the smallest set of things you need to read
to answer the question “what’s making this shit crash”. That’s it.&lt;/p&gt;

&lt;h2 id=&quot;step-1-make-it-go&quot;&gt;Step 1. Make it go&lt;/h2&gt;

&lt;p&gt;If you want to pass a bunch of arguments to your executable &lt;code class=&quot;highlighter-rouge&quot;&gt;moose&lt;/code&gt;, use&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;´ ▽｀&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.。ｏ♡ src on fix/moose-crash ☀ ❥ lldb -- moose arg1 arg2
Current executable &lt;span class=&quot;nb&quot;&gt;set &lt;/span&gt;to &lt;span class=&quot;s1&quot;&gt;'moose'&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;x86_64&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you don’t have arguments, &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb foo&lt;/code&gt; is enough. This just tells &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt;
which executable to care about, but it won’t actually start the process for you.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; run    --&amp;gt; Start or re-start your process
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;exit&lt;/span&gt;   --&amp;gt; Stop your process.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-2-make-it-crash&quot;&gt;Step 2. Make it crash&lt;/h2&gt;
&lt;p&gt;Since we (me) are investigating a crash, the first thing you need is a stack trace that
tells you where the crash is. So, start your process in &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt;, make it crash, and we’ll take it
from there.&lt;/p&gt;

&lt;p&gt;Side bar: I literally typed this blog out while sorting out a crash in the
sign-in bits of Chromium, so all my screenshots are Chromium code. Do not panic.
Your code can crash just as well if you give it enough time and attention.&lt;/p&gt;

&lt;p&gt;Once you hit your crash, &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt; tells you something like this.
&lt;img src=&quot;/images/2014-06-23/crash.png&quot; alt=&quot;lldb crash&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I can’t tell you how excited I am at that little arrow. It &lt;em&gt;almost&lt;/em&gt; looks non-intimidating. Almost.&lt;/p&gt;

&lt;h2 id=&quot;step-3-breakpoints-its-hammer-time&quot;&gt;Step 3. Breakpoints! It’s hammer time&lt;/h2&gt;
&lt;p&gt;The first thing I did was set a breakpoint at that line to figure out
what’s going on right before things got crashy (because I’m sure you’re dying to
know, my crash was happening because we hit that &lt;code class=&quot;highlighter-rouge&quot;&gt;DCHECK&lt;/code&gt; which reads
“the item should always be signed in” and, spoilers, it isn’t)&lt;/p&gt;

&lt;p&gt;To set a breakpoint in a file at a specific line:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint &lt;span class=&quot;nb&quot;&gt;set&lt;/span&gt; --file profile_chooser_controller.mm --line 1509&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Awesome discovery: you don’t have to give the full path to the file (which in
Chromium is a nightmare). Also, there’s autocomplete, so &lt;code class=&quot;highlighter-rouge&quot;&gt;profile_&amp;lt;tab&amp;gt;&lt;/code&gt; gives you
suggestions and happy feelings.&lt;/p&gt;

&lt;p&gt;At this point, I pressed enter a bunch of times (as you do), which ended up
setting that breakpoint 4 times (as it does). So don’t do that. If you ignored that
bit of advice, here’s some helpful breakpoint-related things you can talk to &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt; about:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint list     --&amp;gt; numbered list of all dem breakpoints
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint &lt;span class=&quot;nb&quot;&gt;help&lt;/span&gt;     --&amp;gt; this is surprisingly not scary!
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint delete 4 --&amp;gt; deletes the 4th breakpoint
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; breakpoint delete   --&amp;gt; deletes ALL the things. but warns you first.&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If you don’t like typing, all these commands have super l33t
shortcuts like &lt;code class=&quot;highlighter-rouge&quot;&gt;br s -f moose.c -l 12&lt;/code&gt;. This intimidates me seven ways to Sunday,
since I’ve &lt;em&gt;just&lt;/em&gt; learnt how to set a breakpoint, and I had to do it on the command
line and I like UIs, but if that’s your jam,
&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/IDEs/Conceptual/gdb_to_lldb_transition_guide/document/lldb-command-examples.html&quot;&gt;here&lt;/a&gt; is that list.
Go forth and conquer.&lt;/p&gt;

&lt;p&gt;If you’ve already started your executable and forgot to set a breakpoint, it’s OK!
Just &lt;code class=&quot;highlighter-rouge&quot;&gt;Ctrl+C&lt;/code&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt; to pause your program and clean up your room before
your friends come over. When you’re done, type &lt;code class=&quot;highlighter-rouge&quot;&gt;continue&lt;/code&gt; to resume your process. Amazing!&lt;/p&gt;

&lt;h2 id=&quot;intermission-playing-with-stack-traces&quot;&gt;Intermission: Playing with stack traces&lt;/h2&gt;
&lt;p&gt;Current status: we’ve run our code, we’ve hit the breakpoint. &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt; rewards you
with a snippet of code around that point. Dat arrow. ❤︎&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-06-23/breakpoint.png&quot; alt=&quot;lldb breakpoint&quot; /&gt;&lt;/p&gt;

&lt;p&gt;More things that you can probably want to do here:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; thread backtrace    --&amp;gt; stack trace of how we got here
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; up                  --&amp;gt; move up the stack trace to your parent callee&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;step-4-poke-at-things&quot;&gt;Step 4: Poke at things&lt;/h2&gt;
&lt;p&gt;Once you’re paused, you can inspect the value of a variable in that scope. You
probably want to do that because 90% of the time a thing that shouldn’t be null
is null, because C++.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; frame variable viewMode_&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;To step through things, get in the llama car, close the door, and start navimagating:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; step   --&amp;gt; step into the call at this line. Alias &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'thread step-inst'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; next   --&amp;gt; skip to the next line. Alias &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'thread step-in'&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;lldb&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; finish --&amp;gt; step out of this call. Terrible &lt;span class=&quot;nb&quot;&gt;alias &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;'thread step-out'&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;If at any point you want to restart your process, just type &lt;code class=&quot;highlighter-rouge&quot;&gt;run&lt;/code&gt; again. Don’t worry,
it’s not destructive – you’ll be asked to confirm if you really want to blow
away the frame you’re in. Bam!&lt;/p&gt;

&lt;h3 id=&quot;thats-it&quot;&gt;That’s it!&lt;/h3&gt;
&lt;p&gt;For realsies! You and &lt;code class=&quot;highlighter-rouge&quot;&gt;lldb&lt;/code&gt; should probably get friendship bracelets now.&lt;/p&gt;
&lt;pre&gt;
  　∩∩
　（ﾟωﾟ）  .。ｏ♡
　　│ │
　　│ └─┐○
　　 ヽ　　　丿
　　　∥￣∥
&lt;/pre&gt;
&lt;p&gt;　　　&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Presenter notes that don't suck</title>
   <link href="http://localhost:4000/posts/presenter-notes-that-dont-suck/"/>
   <updated>2014-05-17T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/presenter-notes-that-dont-suck</id>
   <content type="html">&lt;p&gt;You’ve given a talk. It went great, and now everyone wants to see the slides. Hurray! Before we do anything else: give yourself a high-five. Giving a talk is hard, and you did it! This is something to be proud about.&lt;/p&gt;

&lt;p&gt;Here’s the thing about slides, though: if you did them right, your slides should be pretty sparse. They’ll have very few words, probably in a big font, and some slides will only make sense if you’re talking along. This is extra sad if your presentation wasn’t recorded, or you didn’t record your voice: you’ll give your slides to the Internets and the Internets will be confused.&lt;/p&gt;

&lt;p&gt;At this point, you could be tempted to just add a ton of content to your slides. Please don’t. Fewer words on a slide will force people to listen to &lt;em&gt;you&lt;/em&gt; and not your slide. And that’s where the gems are.&lt;/p&gt;

&lt;h2 id=&quot;starting-point&quot;&gt;Starting point&lt;/h2&gt;
&lt;p&gt;This is the slide I’ll be using as an example. It’s part of &lt;a href=&quot;https://speakerdeck.com/notwaldorf/how-chrome-keeps-users-happy-six-truths-and-a-lie&quot;&gt;this&lt;/a&gt; presentation I just gave about keeping users happy. On its own, it’s a fine looking slide, but unfortunately, it lacks some context. 1% of what? Am I talking about 1% of users? Am I saying I have 1% of all the users? Noooobody knows.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/original-slide.png&quot; alt=&quot;original slide&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attempt-the-first-presenter-notes&quot;&gt;Attempt the first: presenter notes&lt;/h2&gt;
&lt;p&gt;The first thing anyone will tell you (I know this because I &lt;a href=&quot;https://twitter.com/notwaldorf/status/467382129828311040&quot;&gt;asked&lt;/a&gt; Twitter, and this is the first thing it told me) is “export your speaker notes”. I’m making the crazy assumption here you have some presenter notes. If you’re anything like me, you probably have to clean them up a little because the world isn’t ready for how your brain actually works.&lt;/p&gt;

&lt;p&gt;So you export your presentation with presenter notes out of Keynote and into a PDF, and the result is pretty much the worst:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/exported-presenter-notes.png&quot; alt=&quot;exported presenter notes&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Look at all that whitespace! Look how tiny your slide is! Look how that text spans the entire page but it’s in the tiniest font ever. LOOK AT IT. It’s a good time to stop looking at it when your eyes are bleeding. If you upload this presentation into something like Speakerdeck, it will look absolutely ridiculous. Are you angry yet?&lt;/p&gt;

&lt;h2 id=&quot;attempt-the-second-in-slide-presenter-notes&quot;&gt;Attempt the second: in-slide presenter notes.&lt;/h2&gt;
&lt;p&gt;Well, if Keynote can’t be civilized about it, you can take the presenter notes and just paste them at the bottom of the slide. If you set a white background, it even ends up looking like whatever Keynote is attempting, but failing, to achieve. Look! Free consulting for Keynote.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/white-plain-text.png&quot; alt=&quot;plain text&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;attempt-the-next-fancy-text&quot;&gt;Attempt the next: fancy text&lt;/h2&gt;
&lt;p&gt;That was ok, but you might run into some problems if your slide background is white, in which case the text will look like it’s part of the slide, rather than a helpful note. So if the problem is that the text is unstyled, let’s style it and make it look like a note! This is the next thing I came up with:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/fancy-note.png&quot; alt=&quot;fancy text&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It’s a little better, but I think this can still end up looking weird if your slide design isn’t a title-subtitle sort of slide. You might have to spend some time and figure out where to best place that text box.&lt;/p&gt;

&lt;h2 id=&quot;alternative-post-it-notes&quot;&gt;Alternative: post-it notes&lt;/h2&gt;
&lt;p&gt;You can also go for a classic post-it, and slap it wherever you have space. The good news is: everyone knows what a post-it is and they won’t think you designed your slide like that. Whew.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-05-17/post-it.png&quot; alt=&quot;post-it note&quot; style=&quot;width: 400px;&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;disclaimer&quot;&gt;Disclaimer&lt;/h2&gt;
&lt;p&gt;I don’t know which way is better; I think it will depend a lot on your slide deck design. I just wanted you to know that you don’t have to let Keynote terrorize you with its horribly exported presenter notes. There are alternatives.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Static initializers will murder your family</title>
   <link href="http://localhost:4000/posts/static-initializers/"/>
   <updated>2014-04-22T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/static-initializers</id>
   <content type="html">&lt;p&gt;But only if your family is code.&lt;/p&gt;

&lt;p&gt;So this is a bit of a terrible blog post because a) it’s about a really obscure atrocity that happens in C++ (as opposed to the common atrocities that happen in C++ on the regs) and b) there are not enough funnies in the world to make up for it. I recommend skipping it if you’ve just eaten, are feeling light-headed, or don’t want to make eye contact with C++. As a general policy, you should probably never make eye contact with C++. It can smell fear.&lt;/p&gt;

&lt;h2 id=&quot;programmer-meet-static-initializers&quot;&gt;Programmer, meet static initializers&lt;/h2&gt;
&lt;p&gt;We’re going to be talking about static class objects, or objects defined in a global/unnamed namespace, such as these fellas:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;kSquirrel&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sad squirrel&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;// or
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Foo&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panda_&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;also a sad panda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;&lt;em&gt;Static initialization&lt;/em&gt; is the dance we do when creating these objects. This is not a dance we do when we initialize things with &lt;em&gt;constant&lt;/em&gt; data (like &lt;code class=&quot;highlighter-rouge&quot;&gt;static int x = 42&lt;/code&gt;); the compiler sees that the thing after the &lt;code class=&quot;highlighter-rouge&quot;&gt;=&lt;/code&gt; is constant and can’t change, so it can inline it. However, if you try to initialize a variable by running code (e.g. &lt;code class=&quot;highlighter-rouge&quot;&gt;static int x = foo()&lt;/code&gt;), then this is not a constant anymore, and it will result in a static initializer. In C++11, I think &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; will let you hint to the compiler that the thing after the equal is a constant expression, if it is that, so it can compute it at compile-time. I don’t get to use a lot of C++11, so this is still about nightmares of C++ past, and I don’t think &lt;code class=&quot;highlighter-rouge&quot;&gt;constexpr&lt;/code&gt; will do away with all of the murders anyway. Finally, the compiler promises you to run all the static initializers before the body of &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt; is executed. That, unfortunately, doesn’t mean much.&lt;/p&gt;

&lt;h2 id=&quot;why-static-initializers-are-bad-news-bears&quot;&gt;Why static initializers are bad news bears&lt;/h2&gt;
&lt;p&gt;As Douglas Adams, the inventor of C++ said, static initializers have “made a lot of people very angry and been widely regarded as a bad move”. Apart from being hard to spell, they tend to throw up on your shoes:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Static variables in the same &lt;em&gt;compilation unit&lt;/em&gt; (or the same file) will be constructed in the order they are defined. This means that this code is predictable, and always does exactly what you think it does. This is also the last of the good news:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;robin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSidekick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;ul&gt;
  &lt;li&gt;Static variables in &lt;em&gt;different&lt;/em&gt; translation units are constructed in an undefined order. This is so terrible it has its own name: the &lt;a href=&quot;http://www.parashift.com/c++-faq/static-init-order.html&quot;&gt;static initialization order fiasco&lt;/a&gt;. It goes like this:&lt;/li&gt;
&lt;/ul&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;  &lt;span class=&quot;c1&quot;&gt;// In x.cpp:
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// In y.cpp:
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Superhero&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;robin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;batman&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getSidekick&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;());&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// If that wasn't believable, imagine it was something like:
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// static Superhero robin(BestSuperhero::batman);
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// where BestSuperhero is a namespace or a static class and
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// you call batman.getSidekick() in robin's constructor.
&lt;/span&gt;  &lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yup. That’s it. Whether &lt;code class=&quot;highlighter-rouge&quot;&gt;x.cpp&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;y.cpp&lt;/code&gt; gets compiled first is not defined (because C++), which means if &lt;code class=&quot;highlighter-rouge&quot;&gt;y.cpp&lt;/code&gt; gets compiled first, &lt;code class=&quot;highlighter-rouge&quot;&gt;batman&lt;/code&gt; hasn’t been constructed. You know what happens when you call &lt;code class=&quot;highlighter-rouge&quot;&gt;getSidekick()&lt;/code&gt; on an uninitialized object? Regrets happen.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We’re not done yet. Why have insanely terrible code when you can have insanely terrible EXPENSIVE code! Evan Martin has a really, really good &lt;a href=&quot;http://neugierig.org/software/chromium/notes/2011/08/static-initializers.html&quot;&gt;post&lt;/a&gt; about this, but the tl;dr is that because the static initializers need to happen before &lt;code class=&quot;highlighter-rouge&quot;&gt;main()&lt;/code&gt;, that code needs to be paged, which leads to disk seeks, which leads to awful startup performance. Seriously, read Evan’s post because it’s amazing.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;spotting-static-initializers-in-the-wild-an-incomplete-manual&quot;&gt;Spotting static initializers in the wild: an incomplete manual&lt;/h2&gt;
&lt;p&gt;Here are some examples of things that are and aren’t static initializers, so
that at least we know what we’re looking for before we try to fix them.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// Both of these are ok, because 0 is a compile time constant, so it can't
// change. The const doesn't make a difference; it's the thing after
// the = sign that makes the difference.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;y&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// Below, both the pointer and the chars in the string are const, so the
// compiler will treat this as a compile-time constant. So this is ok
// because both the thing before and after the = sign are constant.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;char&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;panda&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;happy panda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// This, however, calls a constructor, so it's not ok.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sad_panda&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;sad panda&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  
&lt;span class=&quot;c1&quot;&gt;// This is not ok, because the thing after the = sign isn't a const,
// so it can change before b is initialized.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;  

&lt;span class=&quot;c1&quot;&gt;// This has to call the Muppet() constructor, and who knows what that
// does, so it's definitely not a const, and a case of the static initializers.
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Muppet&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;waldorf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;thems-the-breaks&quot;&gt;Them’s the breaks&lt;/h2&gt;
&lt;p&gt;There’s a couple of ways in which you can fix this, some better than others:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The best static initializer is no static initializer, so try const-ing all your things away. This will take you as far as defining an array of strings, for which you can’t pray the initializer away. (Trivia: Praying The Const Away™ is what I call a &lt;code class=&quot;highlighter-rouge&quot;&gt;const_cast&lt;/code&gt;)&lt;/li&gt;
  &lt;li&gt;Place all your globals in the same compilation unit (i.e. a massive &lt;code class=&quot;highlighter-rouge&quot;&gt;constants.cpp&lt;/code&gt; file). You can certainly try this, but if your project is the giant Snuffleupagus that Chrome is, you might be laughed at&lt;/li&gt;
  &lt;li&gt;Place the static globals inside the function that needs them (or, if they’re the village bicycle, make a getter for them), and define them as function-static variables. Then you know they will be initialized only once, the first time that function is called. Whenever it is called&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;That last bullet sounds like black magic, so here’s an example. This is the static initializer that we are trying to fix. Convince yourself that this code is no good:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;k&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pears&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;meerkats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBucketThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;We can fix it by moving &lt;code class=&quot;highlighter-rouge&quot;&gt;bucket&lt;/code&gt; into &lt;code class=&quot;highlighter-rouge&quot;&gt;GetBucketThing()&lt;/code&gt;:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-c--&quot; data-lang=&quot;c++&quot;&gt;&lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GetBucketThing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;// Sure, it's a non-trivial constructor, but it will get called once,
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// the first time GetBucketThing() gets called, which will be at runtime
&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// and therefore a-ok.
&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;std&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;string&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;apples&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;pears&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;meerkats&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;};&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;];&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Yup. That’s pretty much it. If you want more reading on the topic, here’s a neat chromium-dev &lt;a href=&quot;https://groups.google.com/a/chromium.org/forum/#!topic/chromium-dev/p6h3HC8Wro4&quot;&gt;thread&lt;/a&gt; discussing this in more details (and talking about when these static globals are actually cleaned up).&lt;/p&gt;

&lt;h2 id=&quot;mmmmkay&quot;&gt;Mmmmkay.&lt;/h2&gt;
&lt;p&gt;I don’t know why you’ve made it this far. Maybe you thought there was going to be a joke or a prize at the end. There isn’t. There’s just this gif, and you could’ve just scrolled down for it.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/3boPPdHk2ueo8/giphy.gif&quot; alt=&quot;puppy&quot; /&gt;&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Presentation slides and writer's block</title>
   <link href="http://localhost:4000/posts/slides-writers-block/"/>
   <updated>2014-04-09T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/slides-writers-block</id>
   <content type="html">&lt;p&gt;I am the poster child for writer’s block. I can’t write the &lt;code class=&quot;highlighter-rouge&quot;&gt;#ifdef&lt;/code&gt; header guard correctly for a brand new C++ class, I don’t remember the order of the &lt;code class=&quot;highlighter-rouge&quot;&gt;public static void main args&lt;/code&gt; incantation in Java, and for the life of me, I can’t start working on an empty presentation. Not even if you promise me pizza. (Please promise me pizza though.)&lt;/p&gt;

&lt;h2 id=&quot;start-with-an-outline&quot;&gt;Start with an outline&lt;/h2&gt;
&lt;p&gt;There’s already an amazing &lt;a href=&quot;http://speaking.io/plan/an-outline/&quot;&gt;speaking.io post&lt;/a&gt; about writing outlines which you should read. The tl;dr is that you start with the top-level things that you want to talk about (feel free to &lt;code class=&quot;highlighter-rouge&quot;&gt;s/2Pac/Biggie/g&lt;/code&gt; in that example if a) you have good taste or b) you’re from the East Coast because c) yolo), and then slowly, but with gumption, start developing dem ideas.&lt;/p&gt;

&lt;p&gt;I personally take that post literally and write my outline as a markdown gist. The top-level ideas are ## headers, the supporting points are sub-bullets, and there’s a lot of “???. Profit!” and notes to future-Monica, because present-Monica is usually a jerk.&lt;/p&gt;

&lt;h2 id=&quot;time-to-procrastinate&quot;&gt;Time to procrastinate&lt;/h2&gt;
&lt;p&gt;This is great! You have an outline! You deserve a break. No, really; take a break.&lt;/p&gt;

&lt;p&gt;I let this baby stew for a couple of days, so that it gets nice and tender. Nobody likes an undercooked outline. It’s also not a terrible idea at this point to ask some of your friends to read your outline and tell you if this would be a talk they wouldn’t hate listening to.&lt;/p&gt;

&lt;h2 id=&quot;time-for-skeletor&quot;&gt;Time for Skeletor™&lt;/h2&gt;
&lt;p&gt;Once you think you’ve procrastinated enough and it’s time to actually work on your presentation, you’ll be tempted to start thinking about slide design, typefaces, and the kind of cat gifs you’ll include for bonus points.&lt;/p&gt;

&lt;p&gt;Don’t.&lt;/p&gt;

&lt;p&gt;I mean, definitely include cat gifs, but that time isn’t now. I’m pretty sure “being OCD about typography” is correlated with “being really good at writer’s block”, so I can promise that you’ll waste many evenings choosing drop shadows before you realize how screwed you are for content.&lt;/p&gt;

&lt;p&gt;I’ve sorted this out by having a &lt;em&gt;really&lt;/em&gt; basic presentation &lt;a href=&quot;/includes/skeletor.pdf&quot;&gt;template&lt;/a&gt;, affectionately named Skeletor, that I only use when I work on the content. It’s got a font that doesn’t make me angry, a really basic colour scheme, and I can distinguish between title and filler slides.&lt;/p&gt;

&lt;script async=&quot;&quot; class=&quot;speakerdeck-embed&quot; data-id=&quot;37416630a2e901311a744eb53c3a6292&quot; data-ratio=&quot;1.33333333333333&quot; src=&quot;//speakerdeck.com/assets/embed.js&quot;&gt;&lt;/script&gt;

&lt;p&gt;Then, I dump the stewed outline into this presentation – the titles, the bullets, the question marks – and do a dry-run. So that the rehearsal is actually useful, you should probably make sure your (entirely empty) presenter’s notes are visible and editable. If you don’t use presenter’s notes, I don’t even know how you exist. Get some paper.&lt;/p&gt;

&lt;h2 id=&quot;the-forced-rehearsal&quot;&gt;The forced rehearsal&lt;/h2&gt;
&lt;p&gt;“But Monica”, you’ll say, “you barely have any content, what are you even rehearsing?”. And my answer to that is: don’t start sentences with “but”. Also, it turns out that even if you haven’t thought about it before, when you have to start speaking about a slide that says “2Pac &amp;lt;3s the Bay Area”, your first instinct will be to panic and explain why that’s true. There’s the content! You’ll make up some facts, some funnies, some things you should have researched but didn’t because you probably watched House of Cards instead, and you will promptly type these out in your presenter’s notes. Then go back, change your slides/notes, and rehearse again. Bingo-bango, sugar in the gas tank, you’re pretty much done.&lt;/p&gt;

&lt;p&gt;Guess who has a non-empty presentation now, with slides and content? GUESS. (Hint: it’s you).&lt;/p&gt;

&lt;p&gt;Now go fix them fonts.&lt;/p&gt;

&lt;h3 id=&quot;-ヾﾉ-&quot;&gt;♬♪♫ ヾ(*・。・)ﾉ ♬♪♫&lt;/h3&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Code reviews for fun and profit</title>
   <link href="http://localhost:4000/posts/code-reviews/"/>
   <updated>2014-03-31T00:00:00-07:00</updated>
   <id>http://localhost:4000/posts/code-reviews</id>
   <content type="html">&lt;h2 id=&quot;stats-a-preamble&quot;&gt;Stats: a preamble&lt;/h2&gt;
&lt;p&gt;I’ve been reading too much about March Madness brackets, so I thought I had to run some numbers around here like the cool kids do. Get your umbrella out, it’s about to rain cold facts.&lt;/p&gt;

&lt;p&gt;In the history of time, &lt;a href=&quot;http://www.ohloh.net/p/chrome&quot;&gt;Chromium&lt;/a&gt; has had 205,095 commits made by 1,943 contributors representing 7,431,088 lines of code. In the last 30 days, there have been 5021 commits, by 637 contributors, including 53 new hoomans.&lt;/p&gt;

&lt;p&gt;I did some advanced Nate Silver analysis here for you, and that’s at least 167 commits and 1+ new committers a day. On average, that’s at least 7 commits an hour. Every hour. All of the hours.&lt;/p&gt;

&lt;p&gt;That’s an imperial ton of new code being added, by what it seems like new people. Imagine if everyone could commit code willy-nilly. Are you imagining a minefield? You should.&lt;/p&gt;

&lt;h2 id=&quot;code-reviews-ftw&quot;&gt;Code reviews ftw&lt;/h2&gt;
&lt;p&gt;Good news for our browser using audience! Chromium isn’t a minefield, and on top of it, has pretty awesome looking code. This comes from the fact that any code changes need to be reviewed and blessed before they can land on the master branch. More eyes means less bugs means you’re less likely to commit broken code and break the internet. And you really don’t want to break the internet.&lt;/p&gt;

&lt;p&gt;Even if you have tests, and everything is going your way, you can write correct, but genuinely shitty code. 7 million lines of kinda-shitty code is not something anyone wants to work with, and are worth investing a little time in fixing.&lt;/p&gt;

&lt;p&gt;Code reviews also bring up the bus factor, which is my favourite sinister nerd metaphor. You know, the &lt;em&gt;buuuuuus&lt;/em&gt; factor. The number of people that can get run over by a bus on a team before that team is royally and epically screwed. If all the code that you write has been closely read by a different person, then you’re probably ok getting run over by a bus every once in a while. But still, you probably shouldn’t. Who would feed your cat?&lt;/p&gt;

&lt;h2 id=&quot;consistent-code-is-the-best-code&quot;&gt;Consistent code is the best code&lt;/h2&gt;
&lt;p&gt;Code &lt;a href=&quot;http://google-styleguide.googlecode.com/svn/trunk/cppguide.xml&quot;&gt;style guides&lt;/a&gt; are sooper neat, and are a huge part of code reviews, because ain’t nobody got time to argue about braces. You can spend that time arguing about imperative vs. functional languages, which is a much better use of everyone’s time. Having a strict and detailed style guide means that, even though it’s probably going to piss off some very opinionated people, all of the code will look the same, all the time, regardless of who wrote it. You can jump into any area of Chromium and feel at home, because nobody went crazy with the whitespace.&lt;/p&gt;

&lt;p&gt;And trust me, it only takes a week to get over the wrong kind of braces.&lt;/p&gt;

&lt;h2 id=&quot;dont-be-scared&quot;&gt;Don’t be scared&lt;/h2&gt;
&lt;p&gt;We’ve reached the point in the blog post where I confess I am a terrible code reviewer. I am incredibly scared of reviewing code I haven’t written. Guess what: in the case of Chromium, that’s most of it.&lt;/p&gt;

&lt;p&gt;Reviewers are usually picked from a list of &lt;a href=&quot;http://dev.chromium.org/developers/owners-files&quot;&gt;owners&lt;/a&gt;, which is a group of people that is intimate enough with that area of code that they’ve taken it out to dinner a couple of times. They’re the ones that have the final say on whether the code is ok, and who make sure that little neighbourhood of code isn’t a minefield. Even if you’re not an owner, your team mates will probably ask you for a first review of their code, to make the owners’ lives easier. You will be tempted to panic and not want to take responsibility for it. You will be tempted to run away from confrontation and agree with all of their changes.&lt;/p&gt;

&lt;p&gt;Don’t. It doesn’t help anyone, and it will be like you’re not even there. You were asked for a review because people trust your judgement and value your opinion. So give it. The worst thing that can happen is that they will disagree, and you will have a polite conversation about it. The best thing that can happen is amazingly awesome code. So, have a little courage, and be the little reviewer that could.&lt;/p&gt;

&lt;h2 id=&quot;dont-be-a-jerk&quot;&gt;Don’t be a jerk&lt;/h2&gt;
&lt;p&gt;Jerks are the worst code reviewers. Generally, people tend to get very defensive when faced with criticism, and they’ll get exponentially more defensive if that criticism comes in a harsh, patronizing voice. Defensive people aren’t open to discussions, and it will make the review experience painful for everyone.&lt;/p&gt;

&lt;p&gt;Don’t be a control freak either. You might disagree with the names of variables and functions, but unless you have good suggestions, you might want to consider conceding those points.&lt;/p&gt;

&lt;p&gt;The moral here is: the code you’re reviewing was written by a smart human. Treat them like one.&lt;/p&gt;

&lt;h2 id=&quot;what-makes-a-great-code-reviewer&quot;&gt;What makes a &lt;em&gt;great&lt;/em&gt; code reviewer&lt;/h2&gt;
&lt;p&gt;Good code reviewers are diligent: they enforce the style guide, they make sure you’ve documented the new code, and they aren’t scared of  making you shave a yak or four if that’s needed (this includes both yaks that you have conjured and the ones you’ve accidentally stumbled upon).&lt;/p&gt;

&lt;p&gt;Even better reviewers will try to help the author of the code learn. This is a very hard stack of plates to balance: on one hand you don’t want to be lazy and offer really vague advice that will waste the programmer’s time, and on the other hand you don’t want to spoon-feed them every single character of code. I don’t think there’s a magic formula here: this comes with experience, and with your knowledge of the person you’re reviewing.&lt;/p&gt;

&lt;p&gt;The best code reviewers are usually right, and always humble. They’ll always admit when they’re wrong and they’ll back away from points that are too annoying (“yes, the way I suggested is better, but I see your point that it’s way, way too much effort, and I agree it’s not worth it”).&lt;/p&gt;

&lt;h2 id=&quot;code-reviews-are-kind-of-social&quot;&gt;Code reviews are kind of social&lt;/h2&gt;
&lt;p&gt;A neat/fun thing that happens even in a project as big as Chromium is that programmers and reviewers will form specific reviewing relationships.&lt;/p&gt;

&lt;p&gt;My favourite reviewer used to leave pretty vague comments when the general approach of one of my patches was bad. At first the comments didn’t make any sense, but because I didn’t want to look dumb, I’d spend four hours trying to figure out what they meant. Somebody who isn’t me would probably just go back and ask for a clarification, and that would define their reviewing relationship. However, I kind of really enjoy this sort of code sherlocking, because by the time I figured out what they meant, I would have learned a whole bunch of new things, fixed my code, replaced it with badass code, and would be genuinely excited. And that’s why they’re &lt;em&gt;my&lt;/em&gt; favourite reviewer, but not necessarily the best reviewer. Our styles just match really well.&lt;/p&gt;

&lt;h2 id=&quot;how-to-level-up-as-a-code-reviewer&quot;&gt;How to level up as a code reviewer&lt;/h2&gt;
&lt;p&gt;First, become comfortable with the style guide. The first thing you should do for every review is go through all of the new code, and find all the nits. Is the indentation ok? Do the variable names follow the naming convention? Have new functions or parameters been documented correctly?&lt;/p&gt;

&lt;p&gt;Once you’re done with that, ask yourself if you understand what the code does. If you can’t, the next person won’t either. It’s easy to think you’re dumb and the code is great, but that’s almost never true. Does the new code make sense where it is? Should it be in a different class? Should it be a class or a helper function? Is this code duplicated anywhere else?&lt;/p&gt;

&lt;p&gt;Make sure that if the code can be tested (this, sadly, isn’t always true), it is tested. Don’t be afraid to ask for tests if they’re not there.&lt;/p&gt;

&lt;p&gt;Finally, ask yourself if tomorrow you’d be comfortable fixing a bug in the code. If it looks scary or confusing to you, it will probably look scary or confusing to everybody else. Remember: only you can prevent forest fires!&lt;/p&gt;
</content>
 </entry>
 
 
 
 
 
 <entry>
   <title>When pull requests get tricky</title>
   <link href="http://localhost:4000/posts/tricky-pull-requests/"/>
   <updated>2014-02-25T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/tricky-pull-requests</id>
   <content type="html">&lt;p&gt;Imagine this: you have forked a repo a long time ago and have since been in a happily committed relationship with the master branch, modifying files and committing from the hip.&lt;/p&gt;

&lt;p&gt;In case you have doubts about the likelihood of this scenario, we’re talking about my &lt;code class=&quot;highlighter-rouge&quot;&gt;notwaldorf.github.com&lt;/code&gt; blog branch, which I forked from &lt;code class=&quot;highlighter-rouge&quot;&gt;holman/left&lt;/code&gt;. All my changes are on the master branch so that GitHub can do its magic gh-pages trick and just Make Things Work™. This could also happen for repos you’ve forked and mucked around with, but never thought you’d ever contribute to.&lt;/p&gt;

&lt;p&gt;Because you’re a good open sorcerer, you might, at some point, want to send a pull request to fix a thing in the original repo. If you’re anything like I am, you are now in a bit of a terrible situation because your fork’s tip of tree has advanced and diverged quite a bit from the upstream repo, so any pull requests you send out will be polluted with code that doesn’t belong in them.&lt;/p&gt;

&lt;p&gt;At this point, you probably have some regrets. Let’s not dwell on them. Here’s the set of steps that will help you navigate this minefield you find yourself in. They’re not special; I just couldn’t find them all in one place, and wanted a summary for the future. &lt;a href=&quot;https://twitter.com/kmrhb&quot;&gt;Kamal&lt;/a&gt; figured most of this out, because he is a git wizard, while I am, most definitely, not.&lt;/p&gt;

&lt;h2 id=&quot;set-up-your-upstream&quot;&gt;Set up your upstream&lt;/h2&gt;
&lt;p&gt;If &lt;code class=&quot;highlighter-rouge&quot;&gt;git remote&lt;/code&gt; doesn’t show you a branch called &lt;code class=&quot;highlighter-rouge&quot;&gt;upstream&lt;/code&gt;, you need to add one:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add upstream https://github.com/user/repo_you_forked.git
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;set-up-a-clean-branch-for-your-fix&quot;&gt;Set up a clean branch for your fix&lt;/h2&gt;
&lt;p&gt;Step into your tardis and branch from when you were last in sync with the upstream. In my case, this was when I initially created my fork.
A dull perusing of &lt;code class=&quot;highlighter-rouge&quot;&gt;git log&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;git reflog&lt;/code&gt; should point you to the right sha. Then,&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b pr_branch
git reset --hard sha_from_the_past
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;get-your-changes-in&quot;&gt;Get your changes in&lt;/h2&gt;
&lt;p&gt;Here you have two options. If your changes are tiny, or you know exactly what they are, you can just manually reapply them. And by that I mean copy paste the changes into the right files, like a barbarian. For the record, this is my preferred approach. I am a barbarian. I live in the git stone age.&lt;/p&gt;

&lt;p&gt;Alternatively, you can go the fancy route with&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -p master file_to_modify
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This will look at the diff between master (which is in the future), and your working copy (we are in the past) and let you pick and choose individual hunks. Having taken a moment and appreciated how amazing this last sentence was, you can:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hit &lt;em&gt;s&lt;/em&gt; to split the hunks into smaller hunks&lt;/li&gt;
  &lt;li&gt;hit &lt;em&gt;y&lt;/em&gt; or &lt;em&gt;n&lt;/em&gt; to pick or skip a hunk.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you’ve touched any files, it would be a good time to do your familiar &lt;code class=&quot;highlighter-rouge&quot;&gt;git add/git commit&lt;/code&gt; dance.&lt;/p&gt;

&lt;h2 id=&quot;merge-the-upstream-changes-in&quot;&gt;Merge the upstream changes in&lt;/h2&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch upstream  # You won't see any changes in git log. Don't panic yet.
git merge upstream/master  # Some wild upstream changes appear in git log.
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;--t-t-t-test-your-cha-an-ges--&quot;&gt;♫ ♪ T-t-t-test your cha-an-ges ♫ ♪&lt;/h2&gt;

&lt;h2 id=&quot;upload-your-branch&quot;&gt;Upload your branch&lt;/h2&gt;
&lt;p&gt;This is the last step. If you want, you can rename your branch before uploading it. I usually do, because my original branch names tend to be silly. After this, you can go and look at your branch in GitHub and be delighted with the progress you’ve made. Time to send out that pull request!&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin pr_branch:possibly_new_branch_name
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;br /&gt;
Hope this helped!&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Ruby for Canadians: an instruction manual</title>
   <link href="http://localhost:4000/posts/ruby-eh/"/>
   <updated>2014-02-25T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/ruby-eh</id>
   <content type="html">&lt;p&gt;One of the hardships about being Canadian is that most programming languages are quite simply, rude. Descriptions like ‘imperative’ and ‘declarative’ are enough to fill even the most impolite of Canadians with a vague sense of discomfort. Fear no more! Ruby is the sort of language that addresses all these concerns, and adds a familiar, maple-syrupy feel to your code. &lt;a href=&quot;https://github.com/notwaldorf/ruby-eh&quot;&gt;Here&lt;/a&gt; are the codes, for your perusal.&lt;/p&gt;

&lt;h2 id=&quot;theres-no-such-thing-as-too-polite&quot;&gt;There’s no such thing as ‘too polite’&lt;/h2&gt;
&lt;p&gt;Ruby lets you open your classes and teach your fellow programmers some basic manners:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;please&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:eh&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:eh?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pardon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:pardon?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:please&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Kernel&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sane_puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;
  &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:giver&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:puts&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;puts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;sane_puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;If you don't mind, &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now you can write correct and civilized code like you’ve always wanted:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;giver&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;maple syrup&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;please&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;eh?&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# If you don't mind, purys elpam&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;dont-forget-about-quebec&quot;&gt;Don’t forget about Quebec&lt;/h2&gt;
&lt;p&gt;Ruby is the first language to pioneer French as the one true language. We have translated all the methods in &lt;code class=&quot;highlighter-rouge&quot;&gt;Array&lt;/code&gt; and stored them in a dictionary called &lt;code class=&quot;highlighter-rouge&quot;&gt;translations&lt;/code&gt;, that contains entries of the form &lt;code class=&quot;highlighter-rouge&quot;&gt;:english_foo =&amp;gt; :french_foo&lt;/code&gt;. A small iteration,&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;
  &lt;span class=&quot;nc&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_methods&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;key?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;kp&quot;&gt;alias_method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;translations&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;f&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And we can write glorious code that would make Quebec proud&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;articles_aleatoires&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;matrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;echantillon&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;rand&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;matrice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compte&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;articles_aleatoires&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; [1, 2]&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;canadian-slang&quot;&gt;Canadian slang&lt;/h2&gt;
&lt;p&gt;Fans of &lt;a href=&quot;http://en.wikipedia.org/wiki/Bob_and_Doug_McKenzie&quot;&gt;Bob and Doug McKenzie&lt;/a&gt; can breathe a sigh of relief to know that Ruby speaks the language of the Great White North, eh?&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sane_to_s&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:to_s&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sane_to_s&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;. Take off, hoser.&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; raise ArgumentError&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# ArgumentError: uncaught throw ArgumentError. Take off, hoser.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;digression-for-non-canadians&quot;&gt;Digression for non-Canadians&lt;/h2&gt;
&lt;p&gt;Of course, you can use this idea of open classes for truly magical features. Good code is nothing if not mildly interesting.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Fixnum&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;alias&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:sane_equals&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:==&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sane_equals&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 4 == 4&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; false&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; 4 == 5&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; true&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;h2 id=&quot;unicode&quot;&gt;Unicode&lt;/h2&gt;
&lt;p&gt;This is where this post starts being less Canadian and more flat out crazy.&lt;/p&gt;

&lt;p&gt;Ruby is down with Unicode in identifiers. That’s because Ruby is down with pretty much everything. The only thing I have yet to convince Ruby to do is to let me alias keywords, and I’m pretty sure that’s just because I haven’t tried hard enough.&lt;/p&gt;

&lt;p&gt;If you add a comment to gently nudge at an encoding, you too can write this production ready code:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;# encoding: utf-8&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☢&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;sane_puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;BOOM&quot;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Guess what calling ☢ will do. GUESS.&lt;/p&gt;

&lt;p&gt;Unicode can fill your boring, profesh code with whimsy:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☆&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☂&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;☎&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Our advanced readers can also define a function named U+00A0, the non-breaking space, as seen &lt;a href=&quot;http://www.rubyinside.com/the-split-is-not-enough-whitespace-shenigans-for-rubyists-5980.html&quot;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;bare-words&quot;&gt;Bare words&lt;/h2&gt;
&lt;p&gt;We all know that Ruby has bare words from Gary Bernhardt’s &lt;a href=&quot;https://www.destroyallsoftware.com/talks/wat&quot;&gt;Wat&lt;/a&gt; talk, but did you know Ruby also allows you to have bare words as function names? Because that’s totally a thing you’d want. Thanks to &lt;a href=&quot;http://99designs.com/tech-blog/blog/2012/10/30/abusing-ruby-for-fun-and-profit/&quot;&gt;Richo Healey&lt;/a&gt; for the example:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;instance_exec&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;method_missing&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;# Splat args if passed in from a parent call&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;is_a?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Array&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NameError&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;method_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;partition&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NameError&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sym&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_s&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method_names&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;NameError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;arguments&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Defining such a function doesn’t even look that improper, which is why I recommend moving the above code into a separate .rb file, deep at the bottom of a folder barrel.&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:define_method&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&quot;take off&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;♫ ♪ Coo loo coo coo, coo coo coo coo ♬ ♪&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;This leads to the most excellent of results, and a job well done:&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;take&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;off&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# &amp;gt;&amp;gt; If you don't mind, ♫ ♪ Coo loo coo coo, coo coo coo coo ♬ ♪&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;# =&amp;gt; nil&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/duckinator&quot;&gt;Nik Markwell&lt;/a&gt; has a neat implementation of a saner, more &lt;a href=&quot;https://gist.github.com/duckinator/d08df4d312139a447738&quot;&gt;constrained&lt;/a&gt; version of this, which ends up looking like&lt;/p&gt;

&lt;div class=&quot;language-ruby highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;However, being practical and sane isn’t the Canadian way. If it were, most Canadians wouldn’t live in a place where 11 months of the year the air hurts your face. We don’t stand for useful applications of bare functions, and nor should you.&lt;/p&gt;

&lt;h2 id=&quot;next-on-our-agenda&quot;&gt;Next on our agenda&lt;/h2&gt;
&lt;p&gt;Convincing the W3C that the California Style Sheets spelling of ‘colour’ and ‘grey’ is the only appropriate one. Do not lose faith, Canadians. Now that the rest of the world has accepted curling as a sport, they’re ready to accept anything.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Cat-DNS: a DNS server that resolves everything to cats</title>
   <link href="http://localhost:4000/posts/go-cat-dns-go/"/>
   <updated>2014-02-18T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/go-cat-dns-go</id>
   <content type="html">&lt;p&gt;The internet needs more cats. DNS servers are the authority on all things internet. Therefore, the best DNS server is the one that resolves everything to cats. Guess what kind of DNS server this is (Hint: it’s the cat kind).&lt;/p&gt;

&lt;h2 id=&quot;making-it-go&quot;&gt;Making it go&lt;/h2&gt;

&lt;p&gt;First, get the &lt;a href=&quot;https://github.com/notwaldorf/cat-dns&quot;&gt;code&lt;/a&gt;, and the npm packages you need (the instructions are with the code). To run, start the server as a privileged process. This is because to be a DNS server, you need to be a UDP server on port 53. This is a small numbered port, which means it needs superpowers. This is how your run it:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;
sudo node cat-dns.js
&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;You also need to somehow set your DNS server to be localhost. On a Mac, I do this by creating a new (wi-fi) interface (called Cats), in my Network preferences, and setting its DNS server to &lt;code class=&quot;highlighter-rouge&quot;&gt;127.0.0.1&lt;/code&gt;. You could do this on your normal interface, but this makes switching back and forth easier.&lt;/p&gt;

&lt;h2 id=&quot;warnings&quot;&gt;Warnings&lt;/h2&gt;
&lt;p&gt;While you’re playing with this, pretty much nothing on your computer that requires the internet works. Except for your browser. And then that’s mostly cats. So being able to deactivate this easily is kind of key (I know. You might think “Why would I ever want to deactivate cats?”, but trust me on this one). I also recommend killing all the things that need to call the mothership (google hangouts, twitter feeds, dropbox, iMessage), because they will not like your sassy cat answers, and will slow everything down.&lt;/p&gt;

&lt;h2 id=&quot;you-are-ready&quot;&gt;You are ready&lt;/h2&gt;
&lt;p&gt;Go in your browser to &lt;code class=&quot;highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; and wait a bit. You should see a cat. Go to a different website. Another cat. Congratulations. Your internet is now all cats.&lt;/p&gt;

&lt;h2 id=&quot;wait-what&quot;&gt;Wait, what?&lt;/h2&gt;
&lt;p&gt;Do not panic. While I recommend you don’t look at the source because it’s gross, if you do look at the source, you’ll notice all it does is resolve any hostname to &lt;code class=&quot;highlighter-rouge&quot;&gt;54.197.244.191&lt;/code&gt;, which is a magical place on the internet that has cats. My friend &lt;a href=&quot;https://github.com/cpatulea/cats&quot;&gt;@eigma&lt;/a&gt; made it, and is hosting it, so please try not to kill all the cat bandwith at once. You could also resolve everything to localhost, and serve your own for now cats on an http server on port 80. But then you’d have to store your own cats locally, and that is animal cruelty. Thankfully, for now, while that magical static IP exists, you don’t have to.
That’s it, that’s all.&lt;/p&gt;

&lt;h2 id=&quot;i-need-to-know-more&quot;&gt;I NEED TO KNOW MORE&lt;/h2&gt;
&lt;p&gt;Here’s the little &lt;a href=&quot;http://notwaldorf.github.io/posts/oops-cat-dns/&quot;&gt;summary&lt;/a&gt; I wrote originally about how DNS servers work. Basically, cat-dns ends up doing this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;gruesomely parse the query from the client. I used &lt;a href=&quot;http://www.zytrax.com/books/dns/ch15/&quot;&gt;this&lt;/a&gt; as a reference on what each of the fields in the message sections are, because the spec itself is very dry. This was the worst part, because the message sections are sequences of bits that don’t add up to bytes on any sane boundary, so you have to work with bit arrays, which is nobody’s idea of fun. Anyway, a spec is a spec.&lt;/li&gt;
  &lt;li&gt;assemble the DNS answer. The answer is mostly the same for each query – the only thing that changes is the content of the query (i.e. the hostname you requested). And you copy that from the query, so it’s not a big deal.&lt;/li&gt;
  &lt;li&gt;always returns &lt;code class=&quot;highlighter-rouge&quot;&gt;54.197.244.191&lt;/code&gt; as the resolved IP, unless you’re requesting &lt;code class=&quot;highlighter-rouge&quot;&gt;imgur.com&lt;/code&gt;. Then it gives you an actual IP for imgur that I got from &lt;code class=&quot;highlighter-rouge&quot;&gt;nslookup&lt;/code&gt;. Imgur stores our cats, so we need to be able to get to them. :)&lt;/li&gt;
&lt;/ul&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Dear sir or madam: the bookmarklet you didn't know you needed</title>
   <link href="http://localhost:4000/posts/dear-sir-or-madam/"/>
   <updated>2014-02-11T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/dear-sir-or-madam</id>
   <content type="html">&lt;p&gt;Do you sometimes feel the internet is holding you hostage? Don’t you wish the internet would &lt;em&gt;look&lt;/em&gt; like it’s holding you hostage? Worry no more! &lt;a href=&quot;https://github.com/notwaldorf/dear-sir-or-madam&quot;&gt;Dear-sir-or-madam&lt;/a&gt; is a bookmarklet that makes web pages look like they’re ransom notes. For example, like this:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://i.imgur.com/Hbcj9jE.png&quot; alt=&quot;screenshot&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;how-to-use&quot;&gt;How to use&lt;/h2&gt;
&lt;p&gt;Bookmark this by dragging it to your bookmark bar: &lt;a href=&quot;javascript:var i,s,ss=['//ajax.googleapis.com/ajax/libs/jquery/1.11.0/jquery.min.js','//rawgit.com/notwaldorf/dear-sir-or-madam/master/ransom-it.js'];for(i=0;i!=ss.length;i++){s=document.createElement('script');s.src=ss[i];document.body.appendChild(s);}void(0);&quot;&gt;ransomify!&lt;/a&gt;.
Then go to a non-https webpage, and hit that bookmark. Then, wait a bit. Then, BAM. Ransomified.&lt;/p&gt;

&lt;h2 id=&quot;disclaimers-disclaimers&quot;&gt;Disclaimers? Disclaimers!&lt;/h2&gt;
&lt;p&gt;This doesn’t work with https websites at the moment (or possibly forever). Also, I wrote most of it in bed, at 7am, after insufficient levels of caffeine, so you can count on this being top drawer code. It’s not the fastest it can be, but it’s definitely not the n^2 abomination I wrote in the first iteration either.&lt;/p&gt;
</content>
 </entry>
 
 
 
 <entry>
   <title>Oops, I accidentally the whole DNS</title>
   <link href="http://localhost:4000/posts/oops-cat-dns/"/>
   <updated>2014-02-06T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/oops-cat-dns</id>
   <content type="html">&lt;p&gt;Here is my confession, internet: I am writing a cat DNS. That is, a DNS server that resolves everything to cats. You want your email? Cat! You want to check the weather? Cat! It’s always cat.&lt;/p&gt;

&lt;h2 id=&quot;wait-why&quot;&gt;Wait why?&lt;/h2&gt;
&lt;p&gt;We were talking at work about DNSes, and it turns out I only &lt;em&gt;hand wavingly&lt;/em&gt; know how they work. I also like things that troll you. The reason why this post is about what I’m doing and not about what I’ve done, is because my server isn’t done yet. 
Let me try to explain.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The DNS &lt;a href=&quot;http://tools.ietf.org/html/rfc1035&quot;&gt;spec&lt;/a&gt; is ridiculous. I genuinely don’t want to parse it; It’s got a billion fields, it’s written in Courier New, and it is really boring. Pros: I have found a nodejs project on github that I’m working from. Cons: it doesn’t work for me.&lt;/li&gt;
  &lt;li&gt;Testing the DNS server is ridiculous. You take your DNS server for granted, dear reader. I know this, because the moment I set my crappy, barely-running, returning-nothing service as my DNS, a hundred thousand requests started coming in. You see, every service in the universe (gmail, hangouts, apple notifications, twitter) polls their mothership every second to check for updates. All these polls come to your server. All you want is to try to go to &lt;code class=&quot;highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; in a tab and see what happens. It meeps, that’s what happens. MEEP.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;dns-how-do-it-do-it&quot;&gt;DNS: How do it do it?&lt;/h2&gt;
&lt;p&gt;You know how DNS works. You give a server a human readable hostname, like &lt;code class=&quot;highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt;, and it gives you back the IP address (like &lt;code class=&quot;highlighter-rouge&quot;&gt;74.125.226.113&lt;/code&gt;) where the thing you are looking for actually lives. Here’s pretty much how it goes.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You type in &lt;code class=&quot;highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt;. We’re off to the races!&lt;/li&gt;
  &lt;li&gt;This goes to a &lt;em&gt;recursive caching name server&lt;/em&gt;, which, after doing some work, will give you the IP you need. This name server has a list of hints, such as addresses of &lt;em&gt;root&lt;/em&gt; name serves, and most likely a cache of popular requests. Let’s say it doesn’t have an answer cached, which means it will go ask a &lt;em&gt;root&lt;/em&gt; nameserver.&lt;/li&gt;
  &lt;li&gt;A &lt;em&gt;root&lt;/em&gt; nameserver might not know the IP of your service, but knows the IP of the top level domain you need to speak to (in this case, the .com one). It also responds with ‘I don’t know, but I bet you this other IP does’&lt;/li&gt;
  &lt;li&gt;The top level domain server (e.g. the .com one) knows you want something about &lt;code class=&quot;highlighter-rouge&quot;&gt;google.com&lt;/code&gt;, so it will tell you where the google &lt;em&gt;authoritative&lt;/em&gt; name server is.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;authoritative&lt;/em&gt; name server is the best. It knows things without having to ask anyone else. The google authoritative name server is going to report back with the IP you want. Bingo bango, sugar in the gas tank.&lt;/li&gt;
  &lt;li&gt;The caveat here is that you have to ask it only about things it knows about. If you end up asking a google authoritative server about &lt;code class=&quot;highlighter-rouge&quot;&gt;notwaldorf.github.com&lt;/code&gt;, it’s most likely going to apologize politely and tell you it doesn’t know.&lt;/li&gt;
  &lt;li&gt;Addendum: @pphaneuf says this is technically incorrect (which is the best kind of incorrect) because all non recursive servers are authoritative about &lt;em&gt;something&lt;/em&gt;. The &lt;code class=&quot;highlighter-rouge&quot;&gt;.com&lt;/code&gt; one is authoritative about who you need to talk to when you want &lt;code class=&quot;highlighter-rouge&quot;&gt;*.com&lt;/code&gt;. @pphaneuf also writes DNSes for a living though, so his level of knowledge is over 9000.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Finally, this is mostly a lie, as in real life all of these &lt;em&gt;recursive&lt;/em&gt; servers that you hit first do a lot of caching. Imagine doing this 4+ step dance every time someone typed &lt;code class=&quot;highlighter-rouge&quot;&gt;www.google.com&lt;/code&gt; in their browser. IMAGINE.&lt;/p&gt;

&lt;p&gt;Cat DNS is technically a &lt;em&gt;recursive caching&lt;/em&gt; name server (because it’s the first one you hit), a &lt;em&gt;root&lt;/em&gt; one, and an &lt;em&gt;authoritative&lt;/em&gt; one, mostly authoritative about cats. Cat DNS knows everything: it’s cats. Cats, cats, cats. This also means it should be super simple to implement.&lt;/p&gt;

&lt;h2 id=&quot;some-code-deets&quot;&gt;Some code deets&lt;/h2&gt;
&lt;p&gt;Things communicate with DNS servers over UDP on port 53. A couple of things:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;53 is a small number for a port, which means it’s privileged. Sudo that with care.&lt;/li&gt;
  &lt;li&gt;You talk to these servers over UDP. UDP is great because it doesn’t have a state, doesn’t do any handshakes, offers no guarantees, and is used for sending a small chunk of data. You know what’s small? The IP of a cat.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;so&quot;&gt;So&lt;/h2&gt;
&lt;p&gt;Tune in next week for results on how this actually worked in practice, once I actually get around to writing dem codes.&lt;/p&gt;

</content>
 </entry>
 
 
 
 <entry>
   <title>Cocoa gems or: how this isn't about reimplementing Ruby in Objective-C</title>
   <link href="http://localhost:4000/posts/cocoa-gems/"/>
   <updated>2014-01-30T00:00:00-08:00</updated>
   <id>http://localhost:4000/posts/cocoa-gems</id>
   <content type="html">&lt;p&gt;Because that would be crazy. Crazy is in the next blog post.&lt;/p&gt;

&lt;p&gt;I’ve had to write a sizeable chunk of (fairly mediocre) Objective-C code recently, and I’ve formed the following opinions:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It’s easier if you just get over the thing with the brackets&lt;/li&gt;
  &lt;li&gt;Event listeners are sooper cool&lt;/li&gt;
  &lt;li&gt;Standard Cocoa controls are great if you want them to look exactly like Apple wants them to look like&lt;/li&gt;
  &lt;li&gt;If you disagree with the above point, you’re going to have to play subclass bingo&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;subclass-bingo&quot;&gt;Subclass bingo&lt;/h2&gt;
&lt;p&gt;You’re a subclass bingo winner when you’ve made a custom class out of all of the NSControls. If this sounds ridiculous, it just means you haven’t tried hard enough.&lt;/p&gt;

&lt;p&gt;I started playing subclass bingo at the same time I started mumbling Cocoa, which was two months ago; I relied on the internet a lot for help. Sometimes the internet let me down, as it is wont to do, and then I had to ask actual humans things that in retrospect were fairly trivial. To save you from bringing a pox on both your houses, here are three (3) custom controls that you might one day look for.&lt;/p&gt;

&lt;p&gt;All of them live in the &lt;a href=&quot;http://www.chromium.org/Home&quot;&gt;Chromium&lt;/a&gt; code zoo now. Token feeding and photography sessions are held three times a day, weather permitting.&lt;/p&gt;

&lt;h2 id=&quot;nsbutton-with-custom-padding&quot;&gt;NSButton with custom padding&lt;/h2&gt;
&lt;p&gt;By default, if you have an NSButton that has an image and a title, these will be squished right next to each other. This doesn’t always look very pretty. By default, we get the thing on the left. We want the thing on the right.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2014-01-30-button-padding.png&quot; alt=&quot;NSButton with padding&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The way we’re going to fix this is by creating a custom &lt;code class=&quot;highlighter-rouge&quot;&gt;NSButtonCell&lt;/code&gt;, and overriding its &lt;code class=&quot;highlighter-rouge&quot;&gt;-drawTitle&lt;/code&gt; method (I actually mean &lt;code class=&quot;highlighter-rouge&quot;&gt;-drawTitle:withFrame:inView:&lt;/code&gt;, but I’m going to keep dropping the other parameters to make things look less scary. You can find everything in the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/cocoa/reference/applicationkit/classes/NSButtonCell_Class/Reference/Reference.html&quot;&gt;docs&lt;/a&gt;, which are quite lovely).&lt;/p&gt;

&lt;p&gt;If you also want to give your button a left margin (I did. I wanted that), you can also override &lt;code class=&quot;highlighter-rouge&quot;&gt;-drawImage&lt;/code&gt; and add some spacing in there. The only thing you need to keep in mind is that because you’re adding all this spacing to the cell, you’ll need to manually update &lt;code class=&quot;highlighter-rouge&quot;&gt;-cellSize&lt;/code&gt;, so that the correct value gets returned and your title isn’t cut off.&lt;/p&gt;

&lt;p&gt;The full implementation is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=345&quot;&gt;here&lt;/a&gt;, and its use is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=402&quot;&gt;here&lt;/a&gt;. The important bits are:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (NSRect)drawTitle:(NSAttributedString*)title
          withFrame:(NSRect)frame
             inView:(NSView*)controlView {
  // This is the text's origin, which is from the left margin of the button.
  // If you add a left margin in -drawImage, you have to add it here as well.
  frame.origin.x += spacing_;
  return [super drawTitle:title withFrame:frame inView:controlView];
}
- (NSSize)cellSize {
  NSSize buttonSize = [super cellSize];
  buttonSize.width += spacing_;
  return buttonSize;
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;nsbutton-with-a-transparent-background-color&quot;&gt;NSButton with a transparent background color&lt;/h2&gt;
&lt;p&gt;Setting a normal, opaque background on a button is easy. You can do something like &lt;code class=&quot;highlighter-rouge&quot;&gt;[[button cell] setBackgroundColor:[NSColor blueColor]]&lt;/code&gt;, however this only works for borderless buttons and opaque backgrounds. If we want to draw a transparent background, we have to take drawing into our own hands and override &lt;code class=&quot;highlighter-rouge&quot;&gt;-drawRect&lt;/code&gt;. Custom painting? You’re well on your way to a subclass bingo! Keep in mind this isn’t the cheapest operation (it gets called literally all the time), so don’t get too ambitious in there.&lt;/p&gt;

&lt;p&gt;The full implementation is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=150&quot;&gt;here&lt;/a&gt;, but the main method is:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;- (void)drawRect:(NSRect)dirtyRect {
  NSColor* backgroundColor = [NSColor colorWithCalibratedWhite:0 alpha:0.1f];
  [backgroundColor setFill];
  // P.S. NSRectFill(...) won't work, and will ignore the alpha. I tried.
  NSRectFillUsingOperation(dirtyRect, NSCompositeSourceAtop);
  [super drawRect:dirtyRect];
}&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Bonus points to Cocoa for using the word “atop”.&lt;/p&gt;

&lt;h2 id=&quot;otter-intermission&quot;&gt;Otter intermission&lt;/h2&gt;
&lt;p&gt;I bet you feel pretty pleased with how you’re doing in subclass bingo right now. Here’s a gif of an  otter who probably just subclassed a slider.
&lt;img src=&quot;http://i.imgur.com/nUIe0yQ.gif&quot; alt=&quot;otter&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;nsbutton-that-changes-its-background-on-hover&quot;&gt;NSButton that changes its background on hover&lt;/h2&gt;
&lt;p&gt;Disclaimer: in Chromium, using a raw &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTrackingArea&lt;/code&gt; is a pretty big &lt;a href=&quot;http://www.chromium.org/developers/coding-style/cocoa-dos-and-donts&quot;&gt;don’t&lt;/a&gt;, because it’s leaky and leads to weird crashes. We also don’t tend to use raw pointers like the code below either, because ain’t nobody got time for segfaults. Instead, we use &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/base/mac/scoped_nsobject.h&quot;&gt;scoped_nsobjects&lt;/a&gt;, which are the badass Objective-C flavours of scoped_ptrs. Refcounting 4 lyfe &amp;lt;3.&lt;/p&gt;

&lt;p&gt;The code as used in Chromium is &lt;a href=&quot;https://code.google.com/p/chromium/codesearch#chromium/src/chrome/browser/ui/cocoa/browser/profile_chooser_controller.mm&amp;amp;l=392&quot;&gt;here&lt;/a&gt;. I’m going to make the crazy assumption that you, dear reader, aren’t using this in Chromium, so below is a regular-world variant. I can tell you that it compiles and runs, but I am not ready at this point to make any guarantees about the irregularities in the space-time continuum it might cause. Worst case, you’ll have to release that &lt;code class=&quot;highlighter-rouge&quot;&gt;NSTrackingArea&lt;/code&gt; when you’re done with it (e.g. in the button’s &lt;code class=&quot;highlighter-rouge&quot;&gt;-dealloc&lt;/code&gt;).&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-objective-c&quot; data-lang=&quot;objective-c&quot;&gt;@interface HoverBackgroundButton : NSButton
@end
@implementation HoverBackgroundButton
- (id)initWithFrame:(NSRect)frameRect {
  if ((self = [super initWithFrame:frameRect])) {
    [self setBordered:NO];
    // Bonus code for you. NSMomentaryChangeButton means that the pressed
    // style of the button is the same as the active one.
    // Also, look: font change!
    [self setFont:[NSFont labelFontOfSize:14]];
    [self setButtonType:NSMomentaryChangeButton];
    [[self cell] setBackgroundColor:[NSColor whiteColor]];
    [self sizeToFit];  // &amp;lt;--- We need this so that [self bounds] is a thing.
    // Add a tracking area so that we can show/hide the button when hovering.
    NSTrackingArea* trackingArea = [[NSTrackingArea alloc]
      initWithRect:[self bounds]
           options:NSTrackingMouseEnteredAndExited | NSTrackingActiveAlways
             owner:self userInfo:nil];
    [self addTrackingArea:trackingArea];
  }
  return self;
}
- (void)mouseEntered:(NSEvent*)event {
  // Boom.
  [[self cell] setBackgroundColor:[NSColor blueColor]];
}
- (void)mouseExited:(NSEvent*)event {
  [[self cell] setBackgroundColor:[NSColor whiteColor]];
}
@end&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;the-end&quot;&gt;The end&lt;/h2&gt;
&lt;p&gt;You’ve made it. Congratulations! Please let me know if/when you win at subclass bingo (though it’s unclear there are any winners), and I will send you another otter gif.&lt;/p&gt;
</content>
 </entry>
 
 
 
</feed>